var tipuesearch = {"pages":[{"title":" DSCF-1224/gmsh_msh1_reader_fortran ","text":"DSCF-1224/gmsh_msh1_reader_fortran gmsh_msh1_reader_fortran API Documentation License Other references Warning This API documentation for gmsh_msh1_reader_fortran is a work in progress. gmsh_msh1_reader_fortran API Documentation This is the main API documentation landing page generated by FORD . License The gmsh_msh1_reader_fortran source code and related files and documentation are distributed under the MIT license . Other references stdlib/API-doc-FORD-file.md at master · fortran-lang/stdlib I used this file as the original.","tags":"home","url":"index.html"},{"title":"gmsh_msh1_data_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public :: gmsh_msh1_data_type Derived type for reading Gmsh MSH file format version 1 Inherits type~~gmsh_msh1_data_type~~InheritsGraph type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element type~gmsh_msh1_node_type gmsh_msh1_node_type type~gmsh_msh1_data_type->type~gmsh_msh1_node_type node type~gmsh_msh1_status_type gmsh_msh1_status_type type~gmsh_msh1_data_type->type~gmsh_msh1_status_type status gmsh_msh_elm_type gmsh_msh_elm_type type~gmsh_msh1_element_type->gmsh_msh_elm_type elm_type type~gmsh_msh1_elm_number_type gmsh_msh1_elm_number_type type~gmsh_msh1_element_type->type~gmsh_msh1_elm_number_type elm_number type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_element_type->type~gmsh_msh1_node_number_type node_number_list type~gmsh_msh1_reg_elem_type gmsh_msh1_reg_elem_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_elem_type reg_elem type~gmsh_msh1_reg_phys_type gmsh_msh1_reg_phys_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_phys_type reg_phys type~gmsh_msh1_node_type->type~gmsh_msh1_node_number_type node_number type~gmsh_msh1_status_unit_type gmsh_msh1_status_unit_type type~gmsh_msh1_status_type->type~gmsh_msh1_status_unit_type err, io type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_elm_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_node_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_tag_type gmsh_msh1_tag_type type~gmsh_msh1_reg_elem_type->type~gmsh_msh1_tag_type type~gmsh_msh1_reg_phys_type->type~gmsh_msh1_tag_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( gmsh_msh1_element_type ), private, allocatable, dimension(:) :: element the elements in the mesh logical, private :: flag_allocation_elements = initial_flag_allocation_elements Whether allocated the array to read elements logical, private :: flag_allocation_nodes = initial_flag_allocation_nodes Whether allocated the array to read nodes logical, private :: flag_deallocation_elements = initial_flag_deallocation_elements Whether deallocated the array to read elements logical, private :: flag_deallocation_nodes = initial_flag_deallocation_nodes Whether deallocated the array to read nodes logical, private :: flag_elm_section_footer = initial_flag_elm_section_footer Whether found the element section footer logical, private :: flag_elm_section_header = initial_flag_elm_section_header Whether found the element section header logical, private :: flag_nod_section_footer = initial_flag_nod_section_footer Whether found the node section footer logical, private :: flag_nod_section_header = initial_flag_nod_section_header Whether found the node section header logical, private :: flag_number_of_elements = initial_flag_number_of_elements Whether found the number of elements logical, private :: flag_number_of_nodes = initial_flag_number_of_nodes Whether found the number of nodes logical, private :: flag_reading_elements = initial_flag_reading_elements Whether the read was successful: element logical, private :: flag_reading_nodes = initial_flag_reading_node Whether the read was successful: node type( gmsh_msh1_node_type ), private, allocatable, dimension(:) :: node the nodes in the mesh type( gmsh_msh1_status_type ), private :: status Source Code type :: gmsh_msh1_data_type private !> Whether found the node section header logical :: flag_nod_section_header = initial_flag_nod_section_header !> Whether found the number of nodes logical :: flag_number_of_nodes = initial_flag_number_of_nodes !> Whether deallocated the array to read nodes logical :: flag_deallocation_nodes = initial_flag_deallocation_nodes !> Whether allocated the array to read nodes logical :: flag_allocation_nodes = initial_flag_allocation_nodes !> Whether the read was successful: node logical :: flag_reading_nodes = initial_flag_reading_node !> Whether found the node section footer logical :: flag_nod_section_footer = initial_flag_nod_section_footer !> Whether found the element section header logical :: flag_elm_section_header = initial_flag_elm_section_header !> Whether found the number of elements logical :: flag_number_of_elements = initial_flag_number_of_elements !> Whether deallocated the array to read elements logical :: flag_deallocation_elements = initial_flag_deallocation_elements !> Whether allocated the array to read elements logical :: flag_allocation_elements = initial_flag_allocation_elements !> Whether the read was successful: element logical :: flag_reading_elements = initial_flag_reading_elements !> Whether found the element section footer logical :: flag_elm_section_footer = initial_flag_elm_section_footer type ( gmsh_msh1_status_type ) :: status !> the nodes in the mesh type ( gmsh_msh1_node_type ), allocatable , dimension (:) :: node !> the elements in the mesh type ( gmsh_msh1_element_type ), allocatable , dimension (:) :: element end type gmsh_msh1_data_type","tags":"","url":"type/gmsh_msh1_data_type.html"},{"title":"gmsh_msh1_element_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public :: gmsh_msh1_element_type Derived type for reading the n -th element in the Gmsh MSH file format version 1 Inherits type~~gmsh_msh1_element_type~~InheritsGraph type~gmsh_msh1_element_type gmsh_msh1_element_type gmsh_msh_elm_type gmsh_msh_elm_type type~gmsh_msh1_element_type->gmsh_msh_elm_type elm_type type~gmsh_msh1_elm_number_type gmsh_msh1_elm_number_type type~gmsh_msh1_element_type->type~gmsh_msh1_elm_number_type elm_number type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_element_type->type~gmsh_msh1_node_number_type node_number_list type~gmsh_msh1_reg_elem_type gmsh_msh1_reg_elem_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_elem_type reg_elem type~gmsh_msh1_reg_phys_type gmsh_msh1_reg_phys_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_phys_type reg_phys type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_elm_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_node_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_tag_type gmsh_msh1_tag_type type~gmsh_msh1_reg_elem_type->type~gmsh_msh1_tag_type type~gmsh_msh1_reg_phys_type->type~gmsh_msh1_tag_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_element_type~~InheritedByGraph type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( gmsh_msh1_elm_number_type ), private :: elm_number the number (index) of the n -th element in the mesh. type(gmsh_msh_elm_type), private :: elm_type the geometrical type of the n -th element in the mesh. type( gmsh_msh1_node_number_type ), private, allocatable, dimension(:) :: node_number_list the list of the number_of_nodes node numbers of the n -th element. type( gmsh_msh1_reg_elem_type ), private :: reg_elem the tag of the elementary entity to which the element belongs type( gmsh_msh1_reg_phys_type ), private :: reg_phys the tag of the physical entity to which the element belongs Source Code type :: gmsh_msh1_element_type private !> |DescGmshMsh1ElmNumber| type ( gmsh_msh1_elm_number_type ) :: elm_number !> |DescGmshMsh1ElmType| type ( gmsh_msh_elm_type ) :: elm_type !> |DescGmshMsh1RegPhys| type ( gmsh_msh1_reg_phys_type ) :: reg_phys !> |DescGmshMsh1RegElem| type ( gmsh_msh1_reg_elem_type ) :: reg_elem !> the list of the `number_of_nodes` node numbers of the *n*-th element. type ( gmsh_msh1_node_number_type ), allocatable , dimension (:) :: node_number_list end type gmsh_msh1_element_type","tags":"","url":"type/gmsh_msh1_element_type.html"},{"title":"gmsh_msh1_elm_number_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public, extends( gmsh_msh1_number_type ) :: gmsh_msh1_elm_number_type Derived type for reading the number (index) of the n -th element in the mesh. Inherits type~~gmsh_msh1_elm_number_type~~InheritsGraph type~gmsh_msh1_elm_number_type gmsh_msh1_elm_number_type type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_elm_number_type->type~gmsh_msh1_number_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_elm_number_type~~InheritedByGraph type~gmsh_msh1_elm_number_type gmsh_msh1_elm_number_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_elm_number_type elm_number type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Source Code type , extends ( gmsh_msh1_number_type ) :: gmsh_msh1_elm_number_type end type gmsh_msh1_elm_number_type","tags":"","url":"type/gmsh_msh1_elm_number_type.html"},{"title":"gmsh_msh1_node_number_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public, extends( gmsh_msh1_number_type ) :: gmsh_msh1_node_number_type Derived type for reading the number (index) of the n -th node in the mesh. Inherits type~~gmsh_msh1_node_number_type~~InheritsGraph type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_node_number_type->type~gmsh_msh1_number_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_node_number_type~~InheritedByGraph type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_node_number_type node_number_list type~gmsh_msh1_node_type gmsh_msh1_node_type type~gmsh_msh1_node_type->type~gmsh_msh1_node_number_type node_number type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element type~gmsh_msh1_data_type->type~gmsh_msh1_node_type node Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Source Code type , extends ( gmsh_msh1_number_type ) :: gmsh_msh1_node_number_type end type gmsh_msh1_node_number_type","tags":"","url":"type/gmsh_msh1_node_number_type.html"},{"title":"gmsh_msh1_node_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public :: gmsh_msh1_node_type Derived type for reading\nthe n -th node in the Gmsh MSH file format version 1 Inherits type~~gmsh_msh1_node_type~~InheritsGraph type~gmsh_msh1_node_type gmsh_msh1_node_type type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_node_type->type~gmsh_msh1_node_number_type node_number type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_node_number_type->type~gmsh_msh1_number_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_node_type~~InheritedByGraph type~gmsh_msh1_node_type gmsh_msh1_node_type type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_node_type node Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( gmsh_msh1_node_number_type ), private :: node_number the number (index) of the n -th node in the mesh. real(kind=real64), private :: x_coord The floating point values giving the X coordinates of the n -th node. real(kind=real64), private :: y_coord The floating point values giving the Y coordinates of the n -th node. real(kind=real64), private :: z_coord The floating point values giving the Z coordinates of the n -th node. Source Code type :: gmsh_msh1_node_type private !> |DescGmshMsh1NodeNumber| type ( gmsh_msh1_node_number_type ) :: node_number !> The floating point values giving the X coordinates of the *n*-th node. real ( real64 ) :: x_coord !> The floating point values giving the Y coordinates of the *n*-th node. real ( real64 ) :: y_coord !> The floating point values giving the Z coordinates of the *n*-th node. real ( real64 ) :: z_coord end type gmsh_msh1_node_type","tags":"","url":"type/gmsh_msh1_node_type.html"},{"title":"gmsh_msh1_reg_elem_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public, extends( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_elem_type Derived type for reading the tag of the elementary entity to which the element belongs Warning The expression must be a positive (non-zero) integer. Inherits type~~gmsh_msh1_reg_elem_type~~InheritsGraph type~gmsh_msh1_reg_elem_type gmsh_msh1_reg_elem_type type~gmsh_msh1_tag_type gmsh_msh1_tag_type type~gmsh_msh1_reg_elem_type->type~gmsh_msh1_tag_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_reg_elem_type~~InheritedByGraph type~gmsh_msh1_reg_elem_type gmsh_msh1_reg_elem_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_elem_type reg_elem type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Source Code type , extends ( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_elem_type end type gmsh_msh1_reg_elem_type","tags":"","url":"type/gmsh_msh1_reg_elem_type.html"},{"title":"gmsh_msh1_reg_phys_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, public, extends( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_phys_type Derived type for reading the tag of the physical entity to which the element belongs Warning The expression must be a positive integer, or zero. Note If expression is equal to zero, the element is considered not to belong to any physical entity. Inherits type~~gmsh_msh1_reg_phys_type~~InheritsGraph type~gmsh_msh1_reg_phys_type gmsh_msh1_reg_phys_type type~gmsh_msh1_tag_type gmsh_msh1_tag_type type~gmsh_msh1_reg_phys_type->type~gmsh_msh1_tag_type Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_reg_phys_type~~InheritedByGraph type~gmsh_msh1_reg_phys_type gmsh_msh1_reg_phys_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_phys_type reg_phys type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Source Code type , extends ( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_phys_type end type gmsh_msh1_reg_phys_type","tags":"","url":"type/gmsh_msh1_reg_phys_type.html"},{"title":"gmsh_msh1_number_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, private, abstract :: gmsh_msh1_number_type Derived type for reading - the number (index) of the n -th element in the mesh. - the number (index) of the n -th node in the mesh. Warning The number must be a positive (non-zero) integer. Note The number do not necessarily have to form a dense nor an ordered sequence. Inherited by type~~gmsh_msh1_number_type~~InheritedByGraph type~gmsh_msh1_number_type gmsh_msh1_number_type type~gmsh_msh1_elm_number_type gmsh_msh1_elm_number_type type~gmsh_msh1_elm_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_node_number_type gmsh_msh1_node_number_type type~gmsh_msh1_node_number_type->type~gmsh_msh1_number_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_elm_number_type elm_number type~gmsh_msh1_element_type->type~gmsh_msh1_node_number_type node_number_list type~gmsh_msh1_node_type gmsh_msh1_node_type type~gmsh_msh1_node_type->type~gmsh_msh1_node_number_type node_number type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element type~gmsh_msh1_data_type->type~gmsh_msh1_node_type node Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer, private :: number Source Code type , abstract :: gmsh_msh1_number_type integer , private :: number end type gmsh_msh1_number_type","tags":"","url":"type/gmsh_msh1_number_type.html"},{"title":"gmsh_msh1_status_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, private :: gmsh_msh1_status_type Inherits type~~gmsh_msh1_status_type~~InheritsGraph type~gmsh_msh1_status_type gmsh_msh1_status_type type~gmsh_msh1_status_unit_type gmsh_msh1_status_unit_type type~gmsh_msh1_status_type->type~gmsh_msh1_status_unit_type err, io Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~gmsh_msh1_status_type~~InheritedByGraph type~gmsh_msh1_status_type gmsh_msh1_status_type type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_status_type status Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( gmsh_msh1_status_unit_type ), public :: err type( gmsh_msh1_status_unit_type ), public :: io Source Code type :: gmsh_msh1_status_type type ( gmsh_msh1_status_unit_type ) :: err , io end type gmsh_msh1_status_type","tags":"","url":"type/gmsh_msh1_status_type.html"},{"title":"gmsh_msh1_status_unit_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, private :: gmsh_msh1_status_unit_type Inherited by type~~gmsh_msh1_status_unit_type~~InheritedByGraph type~gmsh_msh1_status_unit_type gmsh_msh1_status_unit_type type~gmsh_msh1_status_type gmsh_msh1_status_type type~gmsh_msh1_status_type->type~gmsh_msh1_status_unit_type err, io type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_status_type status Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer, public :: code character(len=msg_len), public :: msg Source Code type :: gmsh_msh1_status_unit_type integer :: code character ( len = msg_len ) :: msg end type gmsh_msh1_status_unit_type","tags":"","url":"type/gmsh_msh1_status_unit_type.html"},{"title":"gmsh_msh1_tag_type – DSCF-1224/gmsh_msh1_reader_fortran ","text":"type, private, abstract :: gmsh_msh1_tag_type Derived type for reading - the tag of the elementary entity to which the element belongs - the tag of the physical entity to which the element belongs Inherited by type~~gmsh_msh1_tag_type~~InheritedByGraph type~gmsh_msh1_tag_type gmsh_msh1_tag_type type~gmsh_msh1_reg_elem_type gmsh_msh1_reg_elem_type type~gmsh_msh1_reg_elem_type->type~gmsh_msh1_tag_type type~gmsh_msh1_reg_phys_type gmsh_msh1_reg_phys_type type~gmsh_msh1_reg_phys_type->type~gmsh_msh1_tag_type type~gmsh_msh1_element_type gmsh_msh1_element_type type~gmsh_msh1_element_type->type~gmsh_msh1_reg_elem_type reg_elem type~gmsh_msh1_element_type->type~gmsh_msh1_reg_phys_type reg_phys type~gmsh_msh1_data_type gmsh_msh1_data_type type~gmsh_msh1_data_type->type~gmsh_msh1_element_type element Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer, private :: expression Source Code type , abstract :: gmsh_msh1_tag_type integer , private :: expression end type gmsh_msh1_tag_type","tags":"","url":"type/gmsh_msh1_tag_type.html"},{"title":"all_flag – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function all_flag(mesh_data) If any of the flags is .false. , it indicates that the file read operation failed. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical Called by proc~~all_flag~~CalledByGraph proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file proc~is_read_successful_gmsh_msh1_file->proc~all_flag interface~is_read_successful is_read_successful interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function all_flag ( mesh_data ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: all_flag all_flag = mesh_data % flag_nod_section_header & ! & . and . mesh_data % flag_number_of_nodes & ! & . and . mesh_data % flag_deallocation_nodes & ! & . and . mesh_data % flag_allocation_nodes & ! & . and . mesh_data % flag_reading_nodes & ! & . and . mesh_data % flag_nod_section_footer & ! & . and . mesh_data % flag_elm_section_header & ! & . and . mesh_data % flag_number_of_elements & ! & . and . mesh_data % flag_deallocation_elements & ! & . and . mesh_data % flag_allocation_elements & ! & . and . mesh_data % flag_reading_elements & ! & . and . mesh_data % flag_elm_section_footer end function all_flag","tags":"","url":"proc/all_flag.html"},{"title":"count_elements_gmsh_msh1_data – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function count_elements_gmsh_msh1_data(mesh_data) result(number_of_elements) Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer Called by proc~~count_elements_gmsh_msh1_data~~CalledByGraph proc~count_elements_gmsh_msh1_data count_elements_gmsh_msh1_data interface~count_elements count_elements interface~count_elements->proc~count_elements_gmsh_msh1_data proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file proc~lookup_element_by_loc_gmsh_msh1_file->interface~count_elements interface~lookup_element lookup_element interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function count_elements_gmsh_msh1_data ( mesh_data ) result ( number_of_elements ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer :: number_of_elements number_of_elements = size ( mesh_data % element (:) ) end function count_elements_gmsh_msh1_data","tags":"","url":"proc/count_elements_gmsh_msh1_data.html"},{"title":"count_nodes_gmsh_msh1_data – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function count_nodes_gmsh_msh1_data(mesh_data) result(number_of_nodes) Count the number of gmsh_msh1_node_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer Called by proc~~count_nodes_gmsh_msh1_data~~CalledByGraph proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes count_nodes interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number proc~findloc_gmsh_msh1_node_number->interface~count_nodes proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_loc_gmsh_msh1_file->interface~count_nodes proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element proc~output_node_number_gmsh_msh1_element->interface~count_nodes interface~findloc findloc interface~findloc->proc~findloc_gmsh_msh1_node_number interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function count_nodes_gmsh_msh1_data ( mesh_data ) result ( number_of_nodes ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer :: number_of_nodes number_of_nodes = size ( mesh_data % node (:) ) end function count_nodes_gmsh_msh1_data","tags":"","url":"proc/count_nodes_gmsh_msh1_data.html"},{"title":"count_nodes_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function count_nodes_gmsh_msh1_element(element) result(number_of_nodes) Count the number of gmsh_msh1_node_type s in the gmsh_msh1_element_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer Called by proc~~count_nodes_gmsh_msh1_element~~CalledByGraph proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes count_nodes interface~count_nodes->proc~count_nodes_gmsh_msh1_element proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number proc~findloc_gmsh_msh1_node_number->interface~count_nodes proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_loc_gmsh_msh1_file->interface~count_nodes proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element proc~output_node_number_gmsh_msh1_element->interface~count_nodes interface~findloc findloc interface~findloc->proc~findloc_gmsh_msh1_node_number interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function count_nodes_gmsh_msh1_element ( element ) result ( number_of_nodes ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: number_of_nodes number_of_nodes = size ( element % node_number_list (:) ) end function count_nodes_gmsh_msh1_element","tags":"","url":"proc/count_nodes_gmsh_msh1_element.html"},{"title":"export_elm_number_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function export_elm_number_gmsh_msh1_element(element) result(elm_number) Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer Called by proc~~export_elm_number_gmsh_msh1_element~~CalledByGraph proc~export_elm_number_gmsh_msh1_element export_elm_number_gmsh_msh1_element interface~export_elm_number export_elm_number interface~export_elm_number->proc~export_elm_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_elm_number_gmsh_msh1_element ( element ) result ( elm_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: elm_number elm_number = element % elm_number % number end function export_elm_number_gmsh_msh1_element","tags":"","url":"proc/export_elm_number_gmsh_msh1_element.html"},{"title":"export_elm_type_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function export_elm_type_gmsh_msh1_element(element) result(elm_type) Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer Calls proc~~export_elm_type_gmsh_msh1_element~~CallsGraph proc~export_elm_type_gmsh_msh1_element export_elm_type_gmsh_msh1_element export export proc~export_elm_type_gmsh_msh1_element->export Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~export_elm_type_gmsh_msh1_element~~CalledByGraph proc~export_elm_type_gmsh_msh1_element export_elm_type_gmsh_msh1_element interface~export_elm_type export_elm_type interface~export_elm_type->proc~export_elm_type_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_elm_type_gmsh_msh1_element ( element ) result ( elm_type ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: elm_type elm_type = export ( element % elm_type ) end function export_elm_type_gmsh_msh1_element","tags":"","url":"proc/export_elm_type_gmsh_msh1_element.html"},{"title":"export_node_number_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function export_node_number_gmsh_msh1_node(node) result(node_number) Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value integer Called by proc~~export_node_number_gmsh_msh1_node~~CalledByGraph proc~export_node_number_gmsh_msh1_node export_node_number_gmsh_msh1_node interface~export_node_number export_node_number interface~export_node_number->proc~export_node_number_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_node_number_gmsh_msh1_node ( node ) result ( node_number ) type ( gmsh_msh1_node_type ), intent ( in ) :: node integer :: node_number node_number = node % node_number % number end function export_node_number_gmsh_msh1_node","tags":"","url":"proc/export_node_number_gmsh_msh1_node.html"},{"title":"export_node_number_list_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private pure function export_node_number_list_gmsh_msh1_element(element) result(node_number_list) Get the node_number_list from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer, dimension( count_nodes(element) ) Called by proc~~export_node_number_list_gmsh_msh1_element~~CalledByGraph proc~export_node_number_list_gmsh_msh1_element export_node_number_list_gmsh_msh1_element interface~export_node_number_list export_node_number_list interface~export_node_number_list->proc~export_node_number_list_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure function export_node_number_list_gmsh_msh1_element ( element ) result ( node_number_list ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer , dimension ( count_nodes ( element ) ) :: node_number_list node_number_list (:) = element % node_number_list (:)% number end function export_node_number_list_gmsh_msh1_element","tags":"","url":"proc/export_node_number_list_gmsh_msh1_element.html"},{"title":"export_reg_elem_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function export_reg_elem_gmsh_msh1_element(element) result(reg_elem) Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer Called by proc~~export_reg_elem_gmsh_msh1_element~~CalledByGraph proc~export_reg_elem_gmsh_msh1_element export_reg_elem_gmsh_msh1_element interface~export_reg_elem export_reg_elem interface~export_reg_elem->proc~export_reg_elem_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_reg_elem_gmsh_msh1_element ( element ) result ( reg_elem ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: reg_elem reg_elem = element % reg_elem % expression end function export_reg_elem_gmsh_msh1_element","tags":"","url":"proc/export_reg_elem_gmsh_msh1_element.html"},{"title":"export_reg_phys_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function export_reg_phys_gmsh_msh1_element(element) result(reg_phys) Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer Called by proc~~export_reg_phys_gmsh_msh1_element~~CalledByGraph proc~export_reg_phys_gmsh_msh1_element export_reg_phys_gmsh_msh1_element interface~export_reg_phys export_reg_phys interface~export_reg_phys->proc~export_reg_phys_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function export_reg_phys_gmsh_msh1_element ( element ) result ( reg_phys ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: reg_phys reg_phys = element % reg_phys % expression end function export_reg_phys_gmsh_msh1_element","tags":"","url":"proc/export_reg_phys_gmsh_msh1_element.html"},{"title":"findloc_gmsh_msh1_node_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function findloc_gmsh_msh1_node_number(msh1_data, node_number) result(location) Returns the location of the gmsh_msh1_node_type corresponding to the node_number argument. Warning If no gmsh_msh1_node_type corresponding to the node_number argument exists, zero will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: msh1_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value integer Calls proc~~findloc_gmsh_msh1_node_number~~CallsGraph proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number interface~count_nodes count_nodes proc~findloc_gmsh_msh1_node_number->interface~count_nodes proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~findloc_gmsh_msh1_node_number~~CalledByGraph proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number interface~findloc findloc interface~findloc->proc~findloc_gmsh_msh1_node_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private :: itr_node Source Code elemental function findloc_gmsh_msh1_node_number ( msh1_data , node_number ) result ( location ) type ( gmsh_msh1_data_type ), intent ( in ) :: msh1_data type ( gmsh_msh1_node_number_type ), intent ( in ) :: node_number integer :: location integer :: itr_node location = 0 if ( . not . allocated ( msh1_data % node ) ) return do itr_node = 1 , count_nodes ( msh1_data ) if ( msh1_data % node ( itr_node )% node_number . eq . node_number ) then location = itr_node return end if end do end function findloc_gmsh_msh1_node_number","tags":"","url":"proc/findloc_gmsh_msh1_node_number.html"},{"title":"is_equal_gmsh_msh1_elm_number_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_equal_gmsh_msh1_elm_number_type(number1, number2) result(is_equal) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_elm_number_type ), intent(in) :: number1 type( gmsh_msh1_elm_number_type ), intent(in) :: number2 Return Value logical Called by proc~~is_equal_gmsh_msh1_elm_number_type~~CalledByGraph proc~is_equal_gmsh_msh1_elm_number_type is_equal_gmsh_msh1_elm_number_type interface~operator(.eq.) operator(.eq.) interface~operator(.eq.)->proc~is_equal_gmsh_msh1_elm_number_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_equal_gmsh_msh1_elm_number_type ( number1 , number2 ) result ( is_equal ) type ( gmsh_msh1_elm_number_type ), intent ( in ) :: number1 , number2 logical :: is_equal is_equal = number1 % number . eq . number2 % number end function is_equal_gmsh_msh1_elm_number_type","tags":"","url":"proc/is_equal_gmsh_msh1_elm_number_type.html"},{"title":"is_equal_gmsh_msh1_node_number_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_equal_gmsh_msh1_node_number_type(number1, number2) result(is_equal) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_number_type ), intent(in) :: number1 type( gmsh_msh1_node_number_type ), intent(in) :: number2 Return Value logical Called by proc~~is_equal_gmsh_msh1_node_number_type~~CalledByGraph proc~is_equal_gmsh_msh1_node_number_type is_equal_gmsh_msh1_node_number_type interface~operator(.eq.) operator(.eq.) interface~operator(.eq.)->proc~is_equal_gmsh_msh1_node_number_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_equal_gmsh_msh1_node_number_type ( number1 , number2 ) result ( is_equal ) type ( gmsh_msh1_node_number_type ), intent ( in ) :: number1 , number2 logical :: is_equal is_equal = number1 % number . eq . number2 % number end function is_equal_gmsh_msh1_node_number_type","tags":"","url":"proc/is_equal_gmsh_msh1_node_number_type.html"},{"title":"is_equal_gmsh_msh1_reg_elem_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_equal_gmsh_msh1_reg_elem_type(reg_elem1, reg_elem2) result(is_equal) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem1 type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem2 Return Value logical Called by proc~~is_equal_gmsh_msh1_reg_elem_type~~CalledByGraph proc~is_equal_gmsh_msh1_reg_elem_type is_equal_gmsh_msh1_reg_elem_type interface~operator(.eq.) operator(.eq.) interface~operator(.eq.)->proc~is_equal_gmsh_msh1_reg_elem_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_equal_gmsh_msh1_reg_elem_type ( reg_elem1 , reg_elem2 ) result ( is_equal ) type ( gmsh_msh1_reg_elem_type ), intent ( in ) :: reg_elem1 , reg_elem2 logical :: is_equal is_equal = reg_elem1 % expression . eq . reg_elem2 % expression end function is_equal_gmsh_msh1_reg_elem_type","tags":"","url":"proc/is_equal_gmsh_msh1_reg_elem_type.html"},{"title":"is_equal_gmsh_msh1_reg_phys_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_equal_gmsh_msh1_reg_phys_type(reg_phys1, reg_phys2) result(is_equal) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys1 type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys2 Return Value logical Called by proc~~is_equal_gmsh_msh1_reg_phys_type~~CalledByGraph proc~is_equal_gmsh_msh1_reg_phys_type is_equal_gmsh_msh1_reg_phys_type interface~operator(.eq.) operator(.eq.) interface~operator(.eq.)->proc~is_equal_gmsh_msh1_reg_phys_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_equal_gmsh_msh1_reg_phys_type ( reg_phys1 , reg_phys2 ) result ( is_equal ) type ( gmsh_msh1_reg_phys_type ), intent ( in ) :: reg_phys1 , reg_phys2 logical :: is_equal is_equal = reg_phys1 % expression . eq . reg_phys2 % expression end function is_equal_gmsh_msh1_reg_phys_type","tags":"","url":"proc/is_equal_gmsh_msh1_reg_phys_type.html"},{"title":"is_iostat_failure – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_iostat_failure(status) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical Called by proc~~is_iostat_failure~~CalledByGraph proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~is_iostat_failure proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~is_iostat_failure proc~read_gmsh_msh1_file_kernel->proc~is_iostat_failure proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_node->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_failure interface~is_read_successful is_read_successful interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_iostat_failure ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_iostat_failure is_iostat_failure = ( status % io % code . ne . iostat_success ) end function is_iostat_failure","tags":"","url":"proc/is_iostat_failure.html"},{"title":"is_iostat_success – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_iostat_success(status) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical Called by proc~~is_iostat_success~~CalledByGraph proc~is_iostat_success is_iostat_success proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~is_iostat_success proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_number_of_items->proc~is_iostat_success proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_iostat_success ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_iostat_success is_iostat_success = ( status % io % code . eq . iostat_success ) end function is_iostat_success","tags":"","url":"proc/is_iostat_success.html"},{"title":"is_read_successful_gmsh_msh1_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_read_successful_gmsh_msh1_file(mesh_data) result(is_valid) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical Calls proc~~is_read_successful_gmsh_msh1_file~~CallsGraph proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~is_read_successful_gmsh_msh1_file~~CalledByGraph proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful is_read_successful interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial logical, private :: is_invalid Source Code elemental function is_read_successful_gmsh_msh1_file ( mesh_data ) result ( is_valid ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid logical :: is_invalid is_invalid = & ! & is_stat_failure ( mesh_data % status ) & ! & . or . is_iostat_failure ( mesh_data % status ) & ! & . or . ( . not . all_flag ( mesh_data ) ) is_valid = . not . is_invalid end function is_read_successful_gmsh_msh1_file","tags":"","url":"proc/is_read_successful_gmsh_msh1_file.html"},{"title":"is_stat_failure – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function is_stat_failure(status) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical Called by proc~~is_stat_failure~~CalledByGraph proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~is_stat_failure proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~is_stat_failure proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element interface~is_read_successful is_read_successful interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function is_stat_failure ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_stat_failure is_stat_failure = ( status % err % code . ne . stat_success ) end function is_stat_failure","tags":"","url":"proc/is_stat_failure.html"},{"title":"lookup_node_by_loc_gmsh_msh1_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function lookup_node_by_loc_gmsh_msh1_file(mesh_data, location) result(node) Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Warning If no gmsh_msh1_node_type corresponding to the location argument exists,\na gmsh_msh1_node_type initialized by initialize_gmsh_msh1_node will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in node Return Value type( gmsh_msh1_node_type ) Calls proc~~lookup_node_by_loc_gmsh_msh1_file~~CallsGraph proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file interface~count_nodes count_nodes proc~lookup_node_by_loc_gmsh_msh1_file->interface~count_nodes proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~lookup_node_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~lookup_node_by_loc_gmsh_msh1_file~~CalledByGraph proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function lookup_node_by_loc_gmsh_msh1_file ( mesh_data , location ) result ( node ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data !> location in [[gmsh_msh1_data_type:node]] integer , intent ( in ) :: location type ( gmsh_msh1_node_type ) :: node if ( location . lt . minval_location ) then call initialize_gmsh_msh1_node ( node ) else if ( count_nodes ( mesh_data ) . lt . location ) then call initialize_gmsh_msh1_node ( node ) else node = mesh_data % node ( location ) end if end function lookup_node_by_loc_gmsh_msh1_file","tags":"","url":"proc/lookup_node_by_loc_gmsh_msh1_file.html"},{"title":"lookup_node_by_num_gmsh_msh1_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function lookup_node_by_num_gmsh_msh1_file(mesh_data, node_number) result(node) Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Warning If no gmsh_msh1_node_type corresponding to the node_number argument exists,\na gmsh_msh1_node_type initialized by initialize_gmsh_msh1_node will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value type( gmsh_msh1_node_type ) Calls proc~~lookup_node_by_num_gmsh_msh1_file~~CallsGraph proc~lookup_node_by_num_gmsh_msh1_file lookup_node_by_num_gmsh_msh1_file proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~lookup_node_by_num_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~lookup_node_by_num_gmsh_msh1_file~~CalledByGraph proc~lookup_node_by_num_gmsh_msh1_file lookup_node_by_num_gmsh_msh1_file interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_num_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private :: location Source Code elemental function lookup_node_by_num_gmsh_msh1_file ( mesh_data , node_number ) result ( node ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data type ( gmsh_msh1_node_number_type ), intent ( in ) :: node_number type ( gmsh_msh1_node_type ) :: node integer :: location location = findloc ( mesh_data , node_number ) if ( location . lt . minval_location ) then call initialize_gmsh_msh1_node ( node ) else node = mesh_data % node ( location ) end if end function lookup_node_by_num_gmsh_msh1_file","tags":"","url":"proc/lookup_node_by_num_gmsh_msh1_file.html"},{"title":"output_elm_number_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_elm_number_gmsh_msh1_element(element) result(elm_number) Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_elm_number_type ) Called by proc~~output_elm_number_gmsh_msh1_element~~CalledByGraph proc~output_elm_number_gmsh_msh1_element output_elm_number_gmsh_msh1_element interface~output_elm_number output_elm_number interface~output_elm_number->proc~output_elm_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_elm_number_gmsh_msh1_element ( element ) result ( elm_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_elm_number_type ) :: elm_number elm_number = element % elm_number end function output_elm_number_gmsh_msh1_element","tags":"","url":"proc/output_elm_number_gmsh_msh1_element.html"},{"title":"output_elm_type_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_elm_type_gmsh_msh1_element(element) result(elm_type) Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type(gmsh_msh_elm_type) Called by proc~~output_elm_type_gmsh_msh1_element~~CalledByGraph proc~output_elm_type_gmsh_msh1_element output_elm_type_gmsh_msh1_element interface~output_elm_type output_elm_type interface~output_elm_type->proc~output_elm_type_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_elm_type_gmsh_msh1_element ( element ) result ( elm_type ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh_elm_type ) :: elm_type elm_type = element % elm_type end function output_elm_type_gmsh_msh1_element","tags":"","url":"proc/output_elm_type_gmsh_msh1_element.html"},{"title":"output_node_number_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_node_number_gmsh_msh1_element(element, location) result(node_number) Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Warning If no gmsh_msh1_node_number_type corresponding to the location argument exists,\na gmsh_msh1_node_number_type initialized by initialize_gmsh_msh1_number will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element integer, intent(in) :: location location in node_number_list Return Value type( gmsh_msh1_node_number_type ) Calls proc~~output_node_number_gmsh_msh1_element~~CallsGraph proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element interface~count_nodes count_nodes proc~output_node_number_gmsh_msh1_element->interface~count_nodes proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~output_node_number_gmsh_msh1_element->proc~initialize_gmsh_msh1_number proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~output_node_number_gmsh_msh1_element~~CalledByGraph proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_node_number_gmsh_msh1_element ( element , location ) result ( node_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element !> location in [[gmsh_msh1_element_type:node_number_list]] integer , intent ( in ) :: location type ( gmsh_msh1_node_number_type ) :: node_number if ( location . lt . minval_location ) then call initialize_gmsh_msh1_number ( node_number ) else if ( count_nodes ( element ) . lt . location ) then call initialize_gmsh_msh1_number ( node_number ) else node_number = element % node_number_list ( location ) end if end function output_node_number_gmsh_msh1_element","tags":"","url":"proc/output_node_number_gmsh_msh1_element.html"},{"title":"output_node_number_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_node_number_gmsh_msh1_node(node) result(node_number) Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value type( gmsh_msh1_node_number_type ) Called by proc~~output_node_number_gmsh_msh1_node~~CalledByGraph proc~output_node_number_gmsh_msh1_node output_node_number_gmsh_msh1_node interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_node_number_gmsh_msh1_node ( node ) result ( node_number ) type ( gmsh_msh1_node_type ), intent ( in ) :: node type ( gmsh_msh1_node_number_type ) :: node_number node_number = node % node_number end function output_node_number_gmsh_msh1_node","tags":"","url":"proc/output_node_number_gmsh_msh1_node.html"},{"title":"output_node_number_list_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private pure function output_node_number_list_gmsh_msh1_element(element) result(node_number_list) Get the node_number_list from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_node_number_type ), dimension( count_nodes(element) ) Called by proc~~output_node_number_list_gmsh_msh1_element~~CalledByGraph proc~output_node_number_list_gmsh_msh1_element output_node_number_list_gmsh_msh1_element interface~output_node_number_list output_node_number_list interface~output_node_number_list->proc~output_node_number_list_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure function output_node_number_list_gmsh_msh1_element ( element ) result ( node_number_list ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_node_number_type ), dimension ( count_nodes ( element ) ) :: node_number_list node_number_list (:) = element % node_number_list (:) end function output_node_number_list_gmsh_msh1_element","tags":"","url":"proc/output_node_number_list_gmsh_msh1_element.html"},{"title":"output_reg_elem_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_reg_elem_gmsh_msh1_element(element) result(reg_elem) Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_elem_type ) Called by proc~~output_reg_elem_gmsh_msh1_element~~CalledByGraph proc~output_reg_elem_gmsh_msh1_element output_reg_elem_gmsh_msh1_element interface~output_reg_elem output_reg_elem interface~output_reg_elem->proc~output_reg_elem_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_reg_elem_gmsh_msh1_element ( element ) result ( reg_elem ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_reg_elem_type ) :: reg_elem reg_elem = element % reg_elem end function output_reg_elem_gmsh_msh1_element","tags":"","url":"proc/output_reg_elem_gmsh_msh1_element.html"},{"title":"output_reg_phys_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_reg_phys_gmsh_msh1_element(element) result(reg_phys) Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_phys_type ) Called by proc~~output_reg_phys_gmsh_msh1_element~~CalledByGraph proc~output_reg_phys_gmsh_msh1_element output_reg_phys_gmsh_msh1_element interface~output_reg_phys output_reg_phys interface~output_reg_phys->proc~output_reg_phys_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_reg_phys_gmsh_msh1_element ( element ) result ( reg_phys ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_reg_phys_type ) :: reg_phys reg_phys = element % reg_phys end function output_reg_phys_gmsh_msh1_element","tags":"","url":"proc/output_reg_phys_gmsh_msh1_element.html"},{"title":"output_x_coord_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_x_coord_gmsh_msh1_node(node) result(x_coord) Get the x_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) Called by proc~~output_x_coord_gmsh_msh1_node~~CalledByGraph proc~output_x_coord_gmsh_msh1_node output_x_coord_gmsh_msh1_node interface~output_x_coord output_x_coord interface~output_x_coord->proc~output_x_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_x_coord_gmsh_msh1_node ( node ) result ( x_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: x_coord x_coord = node % x_coord end function output_x_coord_gmsh_msh1_node","tags":"","url":"proc/output_x_coord_gmsh_msh1_node.html"},{"title":"output_y_coord_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_y_coord_gmsh_msh1_node(node) result(y_coord) Get the y_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) Called by proc~~output_y_coord_gmsh_msh1_node~~CalledByGraph proc~output_y_coord_gmsh_msh1_node output_y_coord_gmsh_msh1_node interface~output_y_coord output_y_coord interface~output_y_coord->proc~output_y_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_y_coord_gmsh_msh1_node ( node ) result ( y_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: y_coord y_coord = node % y_coord end function output_y_coord_gmsh_msh1_node","tags":"","url":"proc/output_y_coord_gmsh_msh1_node.html"},{"title":"output_z_coord_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function output_z_coord_gmsh_msh1_node(node) result(z_coord) Get the z_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) Called by proc~~output_z_coord_gmsh_msh1_node~~CalledByGraph proc~output_z_coord_gmsh_msh1_node output_z_coord_gmsh_msh1_node interface~output_z_coord output_z_coord interface~output_z_coord->proc~output_z_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function output_z_coord_gmsh_msh1_node ( node ) result ( z_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: z_coord z_coord = node % z_coord end function output_z_coord_gmsh_msh1_node","tags":"","url":"proc/output_z_coord_gmsh_msh1_node.html"},{"title":"validate_gmsh_msh1_data – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_data(mesh_data) result(is_valid) Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical Calls proc~~validate_gmsh_msh1_data~~CallsGraph proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~validate_gmsh_msh1_data~~CalledByGraph proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_data ( mesh_data ) result ( is_valid ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = is_read_successful ( mesh_data ) if (. not . is_valid ) return is_valid = all ( validate ( mesh_data % node (:) ) ) if (. not . is_valid ) return is_valid = all ( validate_gmsh_msh1_element_with_mesh_data_private ( mesh_data % element (:), mesh_data ) ) end function validate_gmsh_msh1_data","tags":"","url":"proc/validate_gmsh_msh1_data.html"},{"title":"validate_gmsh_msh1_element_with_mesh_data_private – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_element_with_mesh_data_private(element, mesh_data) result(is_valid) Checks if the derived type is valid . Note This function does NOT validate mesh_data . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical Calls proc~~validate_gmsh_msh1_element_with_mesh_data_private~~CallsGraph proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private interface~validate validate proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->interface~validate interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~validate_gmsh_msh1_element_with_mesh_data_private~~CalledByGraph proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private interface~validate validate proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_element_with_mesh_data_private ( element , mesh_data ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = validate ( element ) if (. not . is_valid ) return is_valid = all ( findloc ( mesh_data , element % node_number_list (:) ) . ge . minval_location ) end function validate_gmsh_msh1_element_with_mesh_data_private","tags":"","url":"proc/validate_gmsh_msh1_element_with_mesh_data_private.html"},{"title":"validate_gmsh_msh1_element_with_mesh_data_public – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_element_with_mesh_data_public(element, mesh_data) result(is_valid) Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical Calls proc~~validate_gmsh_msh1_element_with_mesh_data_public~~CallsGraph proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file interface~validate validate proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure proc~validate_gmsh_msh1_data->interface~is_read_successful proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~validate_gmsh_msh1_element_with_mesh_data_public~~CalledByGraph proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate validate interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_element_with_mesh_data_public ( element , mesh_data ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = is_read_successful ( mesh_data ) if (. not . is_valid ) return is_valid = validate_gmsh_msh1_element_with_mesh_data_private ( element , mesh_data ) end function validate_gmsh_msh1_element_with_mesh_data_public","tags":"","url":"proc/validate_gmsh_msh1_element_with_mesh_data_public.html"},{"title":"validate_gmsh_msh1_element_without_mesh_data – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_element_without_mesh_data(element) result(is_valid) Checks if the derived type is valid . Note This function does NOT verify that referenced gmsh_msh1_node_type exist in the mesh. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value logical Calls proc~~validate_gmsh_msh1_element_without_mesh_data~~CallsGraph proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_data->interface~validate interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_node->interface~validate proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~validate_gmsh_msh1_element_without_mesh_data~~CalledByGraph proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_element_without_mesh_data ( element ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element logical :: is_valid is_valid = validate ( element % elm_number ) if (. not . is_valid ) return is_valid = validate ( element % reg_elem ) if (. not . is_valid ) return is_valid = validate ( element % reg_phys ) if (. not . is_valid ) return is_valid = allocated ( element % node_number_list ) if (. not . is_valid ) return is_valid = all ( validate ( element % node_number_list (:) ) ) end function validate_gmsh_msh1_element_without_mesh_data","tags":"","url":"proc/validate_gmsh_msh1_element_without_mesh_data.html"},{"title":"validate_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_node(node) result(is_valid) Checks if the derived type is valid . Note Verification by ieee_is_finite is not required by the gmsh documentation. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value logical Calls proc~~validate_gmsh_msh1_node~~CallsGraph proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate validate proc~validate_gmsh_msh1_node->interface~validate interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_data->interface~validate interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~validate_gmsh_msh1_node~~CalledByGraph proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate validate proc~validate_gmsh_msh1_node->interface~validate interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_node ( node ) result ( is_valid ) type ( gmsh_msh1_node_type ), intent ( in ) :: node logical :: is_valid is_valid = validate ( node % node_number ) if ( . not . is_valid ) return is_valid = ieee_is_finite ( node % x_coord ) & ! & . and . ieee_is_finite ( node % y_coord ) & ! & . and . ieee_is_finite ( node % z_coord ) end function validate_gmsh_msh1_node","tags":"","url":"proc/validate_gmsh_msh1_node.html"},{"title":"validate_gmsh_msh1_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_number(number) result(is_valid) Checks if the derived type is valid . Warning The number must be a positive (non-zero) integer. Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(in) :: number Return Value logical Called by proc~~validate_gmsh_msh1_number~~CalledByGraph proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate validate interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_number ( number ) result ( is_valid ) class ( gmsh_msh1_number_type ), intent ( in ) :: number logical :: is_valid is_valid = number % number . gt . 0 end function validate_gmsh_msh1_number","tags":"","url":"proc/validate_gmsh_msh1_number.html"},{"title":"validate_gmsh_msh1_reg_elem – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_reg_elem(reg_elem) result(is_valid) Checks if the derived type is valid . Warning The expression must be a positive (non-zero) integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem Return Value logical Called by proc~~validate_gmsh_msh1_reg_elem~~CalledByGraph proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate validate interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_reg_elem ( reg_elem ) result ( is_valid ) type ( gmsh_msh1_reg_elem_type ), intent ( in ) :: reg_elem logical :: is_valid is_valid = reg_elem % expression . gt . 0 end function validate_gmsh_msh1_reg_elem","tags":"","url":"proc/validate_gmsh_msh1_reg_elem.html"},{"title":"validate_gmsh_msh1_reg_phys – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental function validate_gmsh_msh1_reg_phys(reg_phys) result(is_valid) Checks if the derived type is valid . Warning The expression must be a positive integer, or zero. Note If expression is equal to zero, the element is considered not to belong to any physical entity. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys Return Value logical Called by proc~~validate_gmsh_msh1_reg_phys~~CalledByGraph proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate validate interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function validate_gmsh_msh1_reg_phys ( reg_phys ) result ( is_valid ) type ( gmsh_msh1_reg_phys_type ), intent ( in ) :: reg_phys logical :: is_valid is_valid = reg_phys % expression . ge . 0 end function validate_gmsh_msh1_reg_phys","tags":"","url":"proc/validate_gmsh_msh1_reg_phys.html"},{"title":"clear_msg – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine clear_msg(msg) Arguments Type Intent Optional Attributes Name character(len=msg_len), intent(inout) :: msg Called by proc~~clear_msg~~CalledByGraph proc~clear_msg clear_msg proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~clear_msg proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~clear_msg proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_node->proc~clear_msg interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine clear_msg ( msg ) character ( len = msg_len ), intent ( inout ) :: msg msg (:) = repeat ( ' ' , msg_len ) end subroutine clear_msg","tags":"","url":"proc/clear_msg.html"},{"title":"initialize_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine initialize_gmsh_msh1_element(element, stat, errmsg) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg Calls proc~~initialize_gmsh_msh1_element~~CallsGraph proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element initialize initialize proc~initialize_gmsh_msh1_element->initialize proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~initialize_gmsh_msh1_element~~CalledByGraph proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file proc~lookup_element_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_element proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element interface~lookup_element lookup_element interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine initialize_gmsh_msh1_element ( element , stat , errmsg ) type ( gmsh_msh1_element_type ), intent ( inout ) :: element integer , intent ( out ) :: stat character ( len =* ), intent ( inout ) :: errmsg call initialize_gmsh_msh1_number ( element % elm_number ) call initialize ( element % elm_type ) element % reg_elem % expression = 0 element % reg_phys % expression = 0 if ( allocated ( element % node_number_list ) ) then deallocate ( & ! element % node_number_list , & ! stat = stat , & ! errmsg = errmsg (:) & ! ) end if end subroutine initialize_gmsh_msh1_element","tags":"","url":"proc/initialize_gmsh_msh1_element.html"},{"title":"initialize_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental subroutine initialize_gmsh_msh1_node(node) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(out) :: node Calls proc~~initialize_gmsh_msh1_node~~CallsGraph proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~initialize_gmsh_msh1_node~~CalledByGraph proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~lookup_node_by_num_gmsh_msh1_file lookup_node_by_num_gmsh_msh1_file proc~lookup_node_by_num_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~initialize_gmsh_msh1_node interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file interface~lookup_node->proc~lookup_node_by_num_gmsh_msh1_file proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental subroutine initialize_gmsh_msh1_node ( node ) type ( gmsh_msh1_node_type ), intent ( out ) :: node call initialize_gmsh_msh1_number ( node % node_number ) node % x_coord = ieee_value ( node % x_coord , ieee_signaling_nan ) node % y_coord = node % x_coord node % z_coord = node % x_coord end subroutine initialize_gmsh_msh1_node","tags":"","url":"proc/initialize_gmsh_msh1_node.html"},{"title":"initialize_gmsh_msh1_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"private elemental subroutine initialize_gmsh_msh1_number(number) Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(inout) :: number Called by proc~~initialize_gmsh_msh1_number~~CalledByGraph proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element proc~output_node_number_gmsh_msh1_element->proc~initialize_gmsh_msh1_number interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_element proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file proc~lookup_element_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_element proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~lookup_node_by_num_gmsh_msh1_file lookup_node_by_num_gmsh_msh1_file proc~lookup_node_by_num_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~initialize_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element interface~lookup_element lookup_element interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file interface~lookup_node->proc~lookup_node_by_num_gmsh_msh1_file proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental subroutine initialize_gmsh_msh1_number ( number ) class ( gmsh_msh1_number_type ), intent ( inout ) :: number number % number = 0 end subroutine initialize_gmsh_msh1_number","tags":"","url":"proc/initialize_gmsh_msh1_number.html"},{"title":"lookup_element_by_loc_gmsh_msh1_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine lookup_element_by_loc_gmsh_msh1_file(mesh_data, location, element, stat, errmsg) Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . Warning If no element corresponding to the location argument exists,\na element initialized by initialize_gmsh_msh1_element will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in element type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg Calls proc~~lookup_element_by_loc_gmsh_msh1_file~~CallsGraph proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file interface~count_elements count_elements proc~lookup_element_by_loc_gmsh_msh1_file->interface~count_elements proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~lookup_element_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_element proc~count_elements_gmsh_msh1_data count_elements_gmsh_msh1_data interface~count_elements->proc~count_elements_gmsh_msh1_data initialize initialize proc~initialize_gmsh_msh1_element->initialize proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~lookup_element_by_loc_gmsh_msh1_file~~CalledByGraph proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file interface~lookup_element lookup_element interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine lookup_element_by_loc_gmsh_msh1_file ( mesh_data , location , element , stat , errmsg ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data !> location in [[gmsh_msh1_data_type:element]] integer , intent ( in ) :: location type ( gmsh_msh1_element_type ), intent ( inout ) :: element integer , intent ( out ) :: stat character ( len =* ), intent ( inout ) :: errmsg if ( location . lt . minval_location ) then call initialize_gmsh_msh1_element ( element , stat , errmsg (:) ) else if ( count_elements ( mesh_data ) . lt . location ) then call initialize_gmsh_msh1_element ( element , stat , errmsg (:) ) else element = mesh_data % element ( location ) end if end subroutine lookup_element_by_loc_gmsh_msh1_file","tags":"","url":"proc/lookup_element_by_loc_gmsh_msh1_file.html"},{"title":"read_file_gmsh_msh1 – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_file_gmsh_msh1(mesh_data, msh1_file) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument character(len=*), intent(in) :: msh1_file File path to read from Calls proc~~read_file_gmsh_msh1~~CallsGraph proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~clear_msg clear_msg proc~read_file_gmsh_msh1->proc~clear_msg proc~is_iostat_failure is_iostat_failure proc~read_file_gmsh_msh1->proc~is_iostat_failure proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~is_iostat_failure proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~initialize_gmsh_msh1_node proc~is_iostat_success is_iostat_success proc~read_gmsh_msh1_file_kernel->proc~is_iostat_success proc~is_stat_failure is_stat_failure proc~read_gmsh_msh1_file_kernel->proc~is_stat_failure proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_gmsh_msh1_header_footer read_gmsh_msh1_header_footer proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_header_footer proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number proc~read_gmsh_msh1_element->proc~clear_msg proc~read_gmsh_msh1_element->proc~is_iostat_failure proc~read_gmsh_msh1_element->proc~is_stat_failure proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element proc~read_gmsh_msh1_node->proc~clear_msg proc~read_gmsh_msh1_node->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_success proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number initialize initialize proc~initialize_gmsh_msh1_element->initialize Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_file_gmsh_msh1~~CalledByGraph proc~read_file_gmsh_msh1 read_file_gmsh_msh1 interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private :: file_unit Source Code subroutine read_file_gmsh_msh1 ( mesh_data , msh1_file ) !> The read data will be stored in this argument type ( gmsh_msh1_data_type ), intent ( inout ) :: mesh_data !> File path to read from character ( len =* ), intent ( in ) :: msh1_file integer :: file_unit mesh_data % flag_nod_section_header = initial_flag_nod_section_header mesh_data % flag_number_of_nodes = initial_flag_number_of_nodes mesh_data % flag_deallocation_nodes = initial_flag_deallocation_nodes mesh_data % flag_allocation_nodes = initial_flag_allocation_nodes mesh_data % flag_nod_section_footer = initial_flag_nod_section_footer mesh_data % flag_elm_section_header = initial_flag_elm_section_header mesh_data % flag_number_of_elements = initial_flag_number_of_elements mesh_data % flag_deallocation_elements = initial_flag_deallocation_elements mesh_data % flag_allocation_elements = initial_flag_allocation_elements mesh_data % flag_reading_elements = initial_flag_reading_elements mesh_data % flag_elm_section_footer = initial_flag_elm_section_footer call clear_msg ( mesh_data % status % err % msg (:) ) call clear_msg ( mesh_data % status % io % msg (:) ) open ( & ! newunit = file_unit , & ! file = msh1_file (:) , & ! action = 'read' , & ! form = 'formatted' , & ! status = 'old' , & ! iostat = mesh_data % status % io % code , & ! iomsg = mesh_data % status % io % msg (:) & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return call read_gmsh_msh1_file_kernel ( mesh_data , file_unit ) close ( & ! unit = file_unit , & ! iostat = mesh_data % status % io % code , & ! iomsg = mesh_data % status % io % msg (:) & ! ) mesh_data % status % err % code = stat_success end subroutine read_file_gmsh_msh1","tags":"","url":"proc/read_file_gmsh_msh1.html"},{"title":"read_gmsh_msh1_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_gmsh_msh1_element(file_unit, itr_element, text_line, element, status, flag) Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit integer, intent(in) :: itr_element character(len=*), intent(inout) :: text_line type( gmsh_msh1_element_type ), intent(inout) :: element type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag Calls proc~~read_gmsh_msh1_element~~CallsGraph proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~clear_msg clear_msg proc~read_gmsh_msh1_element->proc~clear_msg proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element proc~is_iostat_failure is_iostat_failure proc~read_gmsh_msh1_element->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~read_gmsh_msh1_element->proc~is_stat_failure initialize initialize proc~initialize_gmsh_msh1_element->initialize proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_gmsh_msh1_element~~CalledByGraph proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private :: number_of_nodes the number of nodes for the n -th element. Source Code subroutine read_gmsh_msh1_element ( file_unit , itr_element , text_line , element , status , flag ) integer , intent ( in ) :: file_unit integer , intent ( in ) :: itr_element character ( len =* ), intent ( inout ) :: text_line type ( gmsh_msh1_element_type ), intent ( inout ) :: element type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag !> the number of nodes for the *n*-th element. integer :: number_of_nodes call initialize_gmsh_msh1_element (& ! element = element , & ! stat = status % err % code , & ! errmsg = status % err % msg (:) & ! ) if ( is_stat_failure ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to deallocate No.' , & ! itr_element , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) return end if read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element as string:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! element % elm_number , & ! element % elm_type , & ! element % reg_phys , & ! element % reg_elem , & ! number_of_nodes if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element''s' , & ! '`elm_number`, ' , & ! '`elm_type`,' , & ! '`reg_phys`' , & ! '`reg_elem`' , & ! 'or' , & ! '`number_of_nodes`:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if flag = ( number_of_nodes . ge . 0 ) if ( . not . flag ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,2(1X,A),1X,I0)' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element: `number_of_nodes` is negative:' , & ! 'read value:' , & ! number_of_nodes return end if allocate ( & ! element % node_number_list ( number_of_nodes ) , & ! stat = status % err % code , & ! errmsg = status % err % msg (:) & ! ) if ( is_stat_failure ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to deallocate No.' , & ! itr_element , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! element % elm_number , & ! element % elm_type , & ! element % reg_phys , & ! element % reg_elem , & ! number_of_nodes , & ! element % node_number_list (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element''s' , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if end subroutine read_gmsh_msh1_element","tags":"","url":"proc/read_gmsh_msh1_element.html"},{"title":"read_gmsh_msh1_file_kernel – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_gmsh_msh1_file_kernel(mesh_data, file_unit) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument integer, intent(in) :: file_unit Calls proc~~read_gmsh_msh1_file_kernel~~CallsGraph proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~initialize_gmsh_msh1_node proc~is_iostat_failure is_iostat_failure proc~read_gmsh_msh1_file_kernel->proc~is_iostat_failure proc~is_iostat_success is_iostat_success proc~read_gmsh_msh1_file_kernel->proc~is_iostat_success proc~is_stat_failure is_stat_failure proc~read_gmsh_msh1_file_kernel->proc~is_stat_failure proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_gmsh_msh1_header_footer read_gmsh_msh1_header_footer proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_header_footer proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number proc~read_gmsh_msh1_element->proc~is_iostat_failure proc~read_gmsh_msh1_element->proc~is_stat_failure proc~clear_msg clear_msg proc~read_gmsh_msh1_element->proc~clear_msg proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element proc~read_gmsh_msh1_node->proc~is_iostat_failure proc~read_gmsh_msh1_node->proc~clear_msg proc~read_gmsh_msh1_number_of_items->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_success proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number initialize initialize proc~initialize_gmsh_msh1_element->initialize Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_gmsh_msh1_file_kernel~~CalledByGraph proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private :: number_of_elements the number of elements in the mesh integer, private :: number_of_nodes the number of nodes in the mesh character(len=2048), private :: text_line A string for reading a line of text. The length of this string is 2048, which is a provisional value. Source Code subroutine read_gmsh_msh1_file_kernel ( mesh_data , file_unit ) !> The read data will be stored in this argument type ( gmsh_msh1_data_type ), intent ( inout ) :: mesh_data integer , intent ( in ) :: file_unit !> the number of elements in the mesh integer :: number_of_elements !> the number of nodes in the mesh integer :: number_of_nodes !> version: experimental !> A string for reading a line of text.<br> !> The length of this string is 2048,<br> !> which is a provisional value. character ( len = 2048 ) :: text_line read_nod_section_header : & ! do call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = nod_section_header (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_nod_section_header & ! ) if ( mesh_data % flag_nod_section_header ) exit if ( is_iostat_success ( mesh_data % status ) ) cycle return end do & ! read_nod_section_header read_number_of_nodes : & ! block call read_gmsh_msh1_number_of_items ( & ! file_unit = file_unit , & ! item_name = 'number_of_nodes' , & ! text_line = text_line (:) , & ! number_of_items = number_of_nodes , & ! status = mesh_data % status , & ! flag = mesh_data % flag_number_of_nodes & ! ) if ( . not . mesh_data % flag_number_of_nodes ) return end block & ! read_number_of_nodes read_nodes : & ! block integer :: itr_node if ( allocated ( mesh_data % node ) ) then deallocate (& ! mesh_data % node , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return end if mesh_data % flag_deallocation_nodes = . true . allocate ( & ! mesh_data % node ( number_of_nodes ) , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return mesh_data % flag_allocation_nodes = . true . call initialize_gmsh_msh1_node ( mesh_data % node (:) ) do itr_node = 1 , number_of_nodes call read_gmsh_msh1_node ( & ! file_unit = file_unit , & ! itr_node = itr_node , & ! node = mesh_data % node ( itr_node ) , & ! status = mesh_data % status & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return end do mesh_data % flag_reading_nodes = . true . end block & ! read_nodes read_nod_section_footer : & ! block call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = nod_section_footer (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_nod_section_footer & ! ) if ( . not . mesh_data % flag_nod_section_footer ) return end block & ! read_nod_section_footer read_elm_section_header : & ! do call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = elm_section_header (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_elm_section_header & ! ) if ( mesh_data % flag_elm_section_header ) exit if ( is_iostat_success ( mesh_data % status ) ) cycle return end do & ! read_elm_section_header read_number_of_elements : & ! block call read_gmsh_msh1_number_of_items ( & ! file_unit = file_unit , & ! item_name = 'number_of_elements' , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! number_of_items = number_of_elements , & ! flag = mesh_data % flag_number_of_elements & ! ) if ( . not . mesh_data % flag_number_of_elements ) return end block & ! read_number_of_elements read_elements : & ! block integer :: itr_element if ( allocated ( mesh_data % element ) ) then deallocate (& ! mesh_data % element , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return end if mesh_data % flag_deallocation_elements = . true . allocate ( & ! mesh_data % element ( number_of_elements ) , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return mesh_data % flag_allocation_elements = . true . if ( number_of_elements . gt . 0 ) then do itr_element = 1 , number_of_elements call read_gmsh_msh1_element ( & ! file_unit = file_unit , & ! itr_element = itr_element , & ! text_line = text_line (:) , & ! element = mesh_data % element ( itr_element ) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_reading_elements & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return if ( is_stat_failure ( mesh_data % status ) ) return if ( . not . mesh_data % flag_reading_elements ) return end do else mesh_data % flag_reading_elements = . true . end if end block & ! read_elements read_elm_section_footer : & ! block call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = elm_section_footer (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_elm_section_footer & ! ) end block & ! read_elm_section_footer end subroutine read_gmsh_msh1_file_kernel","tags":"","url":"proc/read_gmsh_msh1_file_kernel.html"},{"title":"read_gmsh_msh1_header_footer – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_gmsh_msh1_header_footer(file_unit, header_footer, text_line, status, flag) Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit character(len=*), intent(in) :: header_footer character(len=*), intent(inout) :: text_line type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag Called by proc~~read_gmsh_msh1_header_footer~~CalledByGraph proc~read_gmsh_msh1_header_footer read_gmsh_msh1_header_footer proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_header_footer proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine read_gmsh_msh1_header_footer ( file_unit , header_footer , text_line , status , flag ) integer , intent ( in ) :: file_unit character ( len =* ), intent ( in ) :: header_footer character ( len =* ), intent ( inout ) :: text_line type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) select case ( status % io % code ) case ( iostat_success ) flag = trim ( text_line (:) ) . eq . header_footer (:) if ( flag ) then status % err % msg (:) = ' ' else status % err % msg (:) = 'The read text line is not `' // header_footer (:) // '`.' end if case ( iostat_end ) status % err % msg (:) = 'Failed to found the `' // header_footer (:) // '`' case default status % err % msg (:) = 'Failed to read the `' // header_footer (:) // '`' end select end subroutine read_gmsh_msh1_header_footer","tags":"","url":"proc/read_gmsh_msh1_header_footer.html"},{"title":"read_gmsh_msh1_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_gmsh_msh1_node(file_unit, itr_node, node, status) Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit integer, intent(in) :: itr_node type( gmsh_msh1_node_type ), intent(out) :: node type( gmsh_msh1_status_type ), intent(inout) :: status Calls proc~~read_gmsh_msh1_node~~CallsGraph proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~clear_msg clear_msg proc~read_gmsh_msh1_node->proc~clear_msg proc~is_iostat_failure is_iostat_failure proc~read_gmsh_msh1_node->proc~is_iostat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_gmsh_msh1_node~~CalledByGraph proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine read_gmsh_msh1_node ( file_unit , itr_node , node , status ) integer , intent ( in ) :: file_unit integer , intent ( in ) :: itr_node type ( gmsh_msh1_node_type ), intent ( out ) :: node type ( gmsh_msh1_status_type ), intent ( inout ) :: status read ( & ! unit = file_unit , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! node % node_number , & ! node % x_coord , & ! node % y_coord , & ! node % z_coord if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_node , & ! 'node:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) end if end subroutine read_gmsh_msh1_node","tags":"","url":"proc/read_gmsh_msh1_node.html"},{"title":"read_gmsh_msh1_number_of_items – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine read_gmsh_msh1_number_of_items(file_unit, item_name, text_line, number_of_items, status, flag) Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit character(len=*), intent(in) :: item_name character(len=*), intent(inout) :: text_line integer, intent(out) :: number_of_items type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag Calls proc~~read_gmsh_msh1_number_of_items~~CallsGraph proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~is_iostat_failure is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_failure proc~is_iostat_success is_iostat_success proc~read_gmsh_msh1_number_of_items->proc~is_iostat_success Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_gmsh_msh1_number_of_items~~CalledByGraph proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~read_file_gmsh_msh1 read_file_gmsh_msh1 proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel interface~read_file read_file interface~read_file->proc~read_file_gmsh_msh1 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=1), private :: dummy Source Code subroutine read_gmsh_msh1_number_of_items ( file_unit , item_name , text_line , number_of_items , status , flag ) integer , intent ( in ) :: file_unit character ( len =* ), intent ( in ) :: item_name character ( len =* ), intent ( inout ) :: text_line integer , intent ( out ) :: number_of_items type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag character ( 1 ) :: dummy read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code status % err % msg (:) = status % io % msg (:) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! number_of_items , dummy if ( is_iostat_success ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(3A)' & ! ) & ! 'Extra data was detected while reading `' , & ! item_name , & ! '`.' return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! number_of_items if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code status % err % msg (:) = status % io % msg (:) return end if if ( number_of_items . lt . 0 ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(2(A,1X),I0,1X,A)' & ! ) & ! 'The number of' , & ! item_name , & ! number_of_items , & ! 'must be greater than -1.' return end if flag = . true . end subroutine read_gmsh_msh1_number_of_items","tags":"","url":"proc/read_gmsh_msh1_number_of_items.html"},{"title":"write_diagnostic_report_reading_gmsh_msh1_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"private  subroutine write_diagnostic_report_reading_gmsh_msh1_file(mesh_data, write_unit) Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: write_unit Called by proc~~write_diagnostic_report_reading_gmsh_msh1_file~~CalledByGraph proc~write_diagnostic_report_reading_gmsh_msh1_file write_diagnostic_report_reading_gmsh_msh1_file interface~write_diagnostic_report_reading write_diagnostic_report_reading interface~write_diagnostic_report_reading->proc~write_diagnostic_report_reading_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code subroutine write_diagnostic_report_reading_gmsh_msh1_file ( mesh_data , write_unit ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer , intent ( in ) :: write_unit write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_nod_section_header , & ! nod_section_header (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_number_of_nodes , & ! 'number_of_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_deallocation_nodes , & ! 'deallocation_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_allocation_nodes , & ! 'allocation_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_reading_nodes , & ! 'reading_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_nod_section_footer , & ! nod_section_footer (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_elm_section_header , & ! elm_section_header (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_number_of_elements , & ! 'number_of_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_deallocation_elements , & ! 'deallocation_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_allocation_elements , & ! 'allocation_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_reading_elements , & ! 'reading_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_elm_section_footer , & ! elm_section_footer (:) write ( write_unit , \"(A,I0)\" ) \"iostat : \" , mesh_data % status % io % code write ( write_unit , \"(A,A )\" ) \"iomsg  : \" , trim ( mesh_data % status % io % msg (:) ) write ( write_unit , \"(A,I0)\" ) \"stat   : \" , mesh_data % status % err % code write ( write_unit , \"(A,A )\" ) \"errmsg : \" , trim ( mesh_data % status % err % msg (:) ) end subroutine write_diagnostic_report_reading_gmsh_msh1_file","tags":"","url":"proc/write_diagnostic_report_reading_gmsh_msh1_file.html"},{"title":"count_elements – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface count_elements Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . Calls interface~~count_elements~~CallsGraph interface~count_elements count_elements proc~count_elements_gmsh_msh1_data count_elements_gmsh_msh1_data interface~count_elements->proc~count_elements_gmsh_msh1_data Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~count_elements~~CalledByGraph interface~count_elements count_elements proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file proc~lookup_element_by_loc_gmsh_msh1_file->interface~count_elements interface~lookup_element lookup_element interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function count_elements_gmsh_msh1_data (mesh_data) result(number_of_elements) License MIT Version experimental Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer","tags":"","url":"interface/count_elements.html"},{"title":"count_nodes – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface count_nodes Count the number of gmsh_msh1_node_type s. Calls interface~~count_nodes~~CallsGraph interface~count_nodes count_nodes proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~count_nodes~~CalledByGraph interface~count_nodes count_nodes proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number proc~findloc_gmsh_msh1_node_number->interface~count_nodes proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_loc_gmsh_msh1_file->interface~count_nodes proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element proc~output_node_number_gmsh_msh1_element->interface~count_nodes interface~findloc findloc interface~findloc->proc~findloc_gmsh_msh1_node_number interface~lookup_node lookup_node interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file interface~output_node_number output_node_number interface~output_node_number->proc~output_node_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function count_nodes_gmsh_msh1_data (mesh_data) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer private elemental function count_nodes_gmsh_msh1_element (element) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_element_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer","tags":"","url":"interface/count_nodes.html"},{"title":"export_elm_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_elm_number Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). Calls interface~~export_elm_number~~CallsGraph interface~export_elm_number export_elm_number proc~export_elm_number_gmsh_msh1_element export_elm_number_gmsh_msh1_element interface~export_elm_number->proc~export_elm_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer","tags":"","url":"interface/export_elm_number.html"},{"title":"export_elm_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_elm_type Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). Calls interface~~export_elm_type~~CallsGraph interface~export_elm_type export_elm_type proc~export_elm_type_gmsh_msh1_element export_elm_type_gmsh_msh1_element interface~export_elm_type->proc~export_elm_type_gmsh_msh1_element export export proc~export_elm_type_gmsh_msh1_element->export Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer","tags":"","url":"interface/export_elm_type.html"},{"title":"export_node_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_node_number Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). Calls interface~~export_node_number~~CallsGraph interface~export_node_number export_node_number proc~export_node_number_gmsh_msh1_node export_node_number_gmsh_msh1_node interface~export_node_number->proc~export_node_number_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value integer","tags":"","url":"interface/export_node_number.html"},{"title":"export_node_number_list – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_node_number_list Get the node_number_list from the gmsh_msh1_element_type (as integer). Calls interface~~export_node_number_list~~CallsGraph interface~export_node_number_list export_node_number_list proc~export_node_number_list_gmsh_msh1_element export_node_number_list_gmsh_msh1_element interface~export_node_number_list->proc~export_node_number_list_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private pure function export_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer, dimension( count_nodes(element) )","tags":"","url":"interface/export_node_number_list.html"},{"title":"export_reg_elem – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_reg_elem Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). Calls interface~~export_reg_elem~~CallsGraph interface~export_reg_elem export_reg_elem proc~export_reg_elem_gmsh_msh1_element export_reg_elem_gmsh_msh1_element interface~export_reg_elem->proc~export_reg_elem_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer","tags":"","url":"interface/export_reg_elem.html"},{"title":"export_reg_phys – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface export_reg_phys Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). Calls interface~~export_reg_phys~~CallsGraph interface~export_reg_phys export_reg_phys proc~export_reg_phys_gmsh_msh1_element export_reg_phys_gmsh_msh1_element interface~export_reg_phys->proc~export_reg_phys_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function export_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer","tags":"","url":"interface/export_reg_phys.html"},{"title":"is_read_successful – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface is_read_successful Calls interface~~is_read_successful~~CallsGraph interface~is_read_successful is_read_successful proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~is_read_successful~~CalledByGraph interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data validate_gmsh_msh1_data proc~validate_gmsh_msh1_data->interface~is_read_successful interface~validate validate proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private interface~validate->proc~validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function is_read_successful_gmsh_msh1_file (mesh_data) result(is_valid) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical","tags":"","url":"interface/is_read_successful.html"},{"title":"lookup_element – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface lookup_element Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . Calls interface~~lookup_element~~CallsGraph interface~lookup_element lookup_element proc~lookup_element_by_loc_gmsh_msh1_file lookup_element_by_loc_gmsh_msh1_file interface~lookup_element->proc~lookup_element_by_loc_gmsh_msh1_file interface~count_elements count_elements proc~lookup_element_by_loc_gmsh_msh1_file->interface~count_elements proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~lookup_element_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_element proc~count_elements_gmsh_msh1_data count_elements_gmsh_msh1_data interface~count_elements->proc~count_elements_gmsh_msh1_data initialize initialize proc~initialize_gmsh_msh1_element->initialize proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine lookup_element_by_loc_gmsh_msh1_file (mesh_data, location, element, stat, errmsg) License MIT Version experimental Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in element type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg","tags":"","url":"interface/lookup_element.html"},{"title":"lookup_node – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface lookup_node Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Calls interface~~lookup_node~~CallsGraph interface~lookup_node lookup_node proc~lookup_node_by_loc_gmsh_msh1_file lookup_node_by_loc_gmsh_msh1_file interface~lookup_node->proc~lookup_node_by_loc_gmsh_msh1_file proc~lookup_node_by_num_gmsh_msh1_file lookup_node_by_num_gmsh_msh1_file interface~lookup_node->proc~lookup_node_by_num_gmsh_msh1_file interface~count_nodes count_nodes proc~lookup_node_by_loc_gmsh_msh1_file->interface~count_nodes proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~lookup_node_by_loc_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~lookup_node_by_num_gmsh_msh1_file->proc~initialize_gmsh_msh1_node proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function lookup_node_by_loc_gmsh_msh1_file (mesh_data, location) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in node Return Value type( gmsh_msh1_node_type ) private elemental function lookup_node_by_num_gmsh_msh1_file (mesh_data, node_number) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value type( gmsh_msh1_node_type )","tags":"","url":"interface/lookup_node.html"},{"title":"operator(.eq.) – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface operator(.eq.) Calls interface~~operator(.eq.)~~CallsGraph interface~operator(.eq.) operator(.eq.) proc~is_equal_gmsh_msh1_elm_number_type is_equal_gmsh_msh1_elm_number_type interface~operator(.eq.)->proc~is_equal_gmsh_msh1_elm_number_type proc~is_equal_gmsh_msh1_node_number_type is_equal_gmsh_msh1_node_number_type interface~operator(.eq.)->proc~is_equal_gmsh_msh1_node_number_type proc~is_equal_gmsh_msh1_reg_elem_type is_equal_gmsh_msh1_reg_elem_type interface~operator(.eq.)->proc~is_equal_gmsh_msh1_reg_elem_type proc~is_equal_gmsh_msh1_reg_phys_type is_equal_gmsh_msh1_reg_phys_type interface~operator(.eq.)->proc~is_equal_gmsh_msh1_reg_phys_type Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function is_equal_gmsh_msh1_elm_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_elm_number_type ), intent(in) :: number1 type( gmsh_msh1_elm_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_node_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_number_type ), intent(in) :: number1 type( gmsh_msh1_node_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_elem_type (reg_elem1, reg_elem2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem1 type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_phys_type (reg_phys1, reg_phys2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys1 type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys2 Return Value logical","tags":"","url":"interface/operator(.eq.).html"},{"title":"output_elm_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_elm_number Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). Calls interface~~output_elm_number~~CallsGraph interface~output_elm_number output_elm_number proc~output_elm_number_gmsh_msh1_element output_elm_number_gmsh_msh1_element interface~output_elm_number->proc~output_elm_number_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_elm_number_type )","tags":"","url":"interface/output_elm_number.html"},{"title":"output_elm_type – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_elm_type Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). Calls interface~~output_elm_type~~CallsGraph interface~output_elm_type output_elm_type proc~output_elm_type_gmsh_msh1_element output_elm_type_gmsh_msh1_element interface~output_elm_type->proc~output_elm_type_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type(gmsh_msh_elm_type)","tags":"","url":"interface/output_elm_type.html"},{"title":"output_node_number – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_node_number Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Calls interface~~output_node_number~~CallsGraph interface~output_node_number output_node_number proc~output_node_number_gmsh_msh1_element output_node_number_gmsh_msh1_element interface~output_node_number->proc~output_node_number_gmsh_msh1_element proc~output_node_number_gmsh_msh1_node output_node_number_gmsh_msh1_node interface~output_node_number->proc~output_node_number_gmsh_msh1_node interface~count_nodes count_nodes proc~output_node_number_gmsh_msh1_element->interface~count_nodes proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~output_node_number_gmsh_msh1_element->proc~initialize_gmsh_msh1_number proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_node_number_gmsh_msh1_element (element, location) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element integer, intent(in) :: location location in node_number_list Return Value type( gmsh_msh1_node_number_type ) private elemental function output_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value type( gmsh_msh1_node_number_type )","tags":"","url":"interface/output_node_number.html"},{"title":"output_node_number_list – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_node_number_list Get the node_number_list from the gmsh_msh1_element_type (as derived type). Calls interface~~output_node_number_list~~CallsGraph interface~output_node_number_list output_node_number_list proc~output_node_number_list_gmsh_msh1_element output_node_number_list_gmsh_msh1_element interface~output_node_number_list->proc~output_node_number_list_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private pure function output_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_node_number_type ), dimension( count_nodes(element) )","tags":"","url":"interface/output_node_number_list.html"},{"title":"output_reg_elem – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_reg_elem Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). Calls interface~~output_reg_elem~~CallsGraph interface~output_reg_elem output_reg_elem proc~output_reg_elem_gmsh_msh1_element output_reg_elem_gmsh_msh1_element interface~output_reg_elem->proc~output_reg_elem_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_elem_type )","tags":"","url":"interface/output_reg_elem.html"},{"title":"output_reg_phys – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_reg_phys Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). Calls interface~~output_reg_phys~~CallsGraph interface~output_reg_phys output_reg_phys proc~output_reg_phys_gmsh_msh1_element output_reg_phys_gmsh_msh1_element interface~output_reg_phys->proc~output_reg_phys_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_phys_type )","tags":"","url":"interface/output_reg_phys.html"},{"title":"output_x_coord – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_x_coord Get the x_coord from the gmsh_msh1_node_type . Calls interface~~output_x_coord~~CallsGraph interface~output_x_coord output_x_coord proc~output_x_coord_gmsh_msh1_node output_x_coord_gmsh_msh1_node interface~output_x_coord->proc~output_x_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_x_coord_gmsh_msh1_node (node) result(x_coord) License MIT Version experimental Get the x_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64)","tags":"","url":"interface/output_x_coord.html"},{"title":"output_y_coord – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_y_coord Get the y_coord from the gmsh_msh1_node_type . Calls interface~~output_y_coord~~CallsGraph interface~output_y_coord output_y_coord proc~output_y_coord_gmsh_msh1_node output_y_coord_gmsh_msh1_node interface~output_y_coord->proc~output_y_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_y_coord_gmsh_msh1_node (node) result(y_coord) License MIT Version experimental Get the y_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64)","tags":"","url":"interface/output_y_coord.html"},{"title":"output_z_coord – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface output_z_coord Get the z_coord from the gmsh_msh1_node_type . Calls interface~~output_z_coord~~CallsGraph interface~output_z_coord output_z_coord proc~output_z_coord_gmsh_msh1_node output_z_coord_gmsh_msh1_node interface~output_z_coord->proc~output_z_coord_gmsh_msh1_node Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function output_z_coord_gmsh_msh1_node (node) result(z_coord) License MIT Version experimental Get the z_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64)","tags":"","url":"interface/output_z_coord.html"},{"title":"read_file – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface read_file Calls interface~~read_file~~CallsGraph interface~read_file read_file proc~read_file_gmsh_msh1 read_file_gmsh_msh1 interface~read_file->proc~read_file_gmsh_msh1 proc~clear_msg clear_msg proc~read_file_gmsh_msh1->proc~clear_msg proc~is_iostat_failure is_iostat_failure proc~read_file_gmsh_msh1->proc~is_iostat_failure proc~read_gmsh_msh1_file_kernel read_gmsh_msh1_file_kernel proc~read_file_gmsh_msh1->proc~read_gmsh_msh1_file_kernel proc~read_gmsh_msh1_file_kernel->proc~is_iostat_failure proc~initialize_gmsh_msh1_node initialize_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~initialize_gmsh_msh1_node proc~is_iostat_success is_iostat_success proc~read_gmsh_msh1_file_kernel->proc~is_iostat_success proc~is_stat_failure is_stat_failure proc~read_gmsh_msh1_file_kernel->proc~is_stat_failure proc~read_gmsh_msh1_element read_gmsh_msh1_element proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_element proc~read_gmsh_msh1_header_footer read_gmsh_msh1_header_footer proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_header_footer proc~read_gmsh_msh1_node read_gmsh_msh1_node proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_node proc~read_gmsh_msh1_number_of_items read_gmsh_msh1_number_of_items proc~read_gmsh_msh1_file_kernel->proc~read_gmsh_msh1_number_of_items proc~initialize_gmsh_msh1_number initialize_gmsh_msh1_number proc~initialize_gmsh_msh1_node->proc~initialize_gmsh_msh1_number proc~read_gmsh_msh1_element->proc~clear_msg proc~read_gmsh_msh1_element->proc~is_iostat_failure proc~read_gmsh_msh1_element->proc~is_stat_failure proc~initialize_gmsh_msh1_element initialize_gmsh_msh1_element proc~read_gmsh_msh1_element->proc~initialize_gmsh_msh1_element proc~read_gmsh_msh1_node->proc~clear_msg proc~read_gmsh_msh1_node->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_failure proc~read_gmsh_msh1_number_of_items->proc~is_iostat_success proc~initialize_gmsh_msh1_element->proc~initialize_gmsh_msh1_number initialize initialize proc~initialize_gmsh_msh1_element->initialize Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine read_file_gmsh_msh1 (mesh_data, msh1_file) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument character(len=*), intent(in) :: msh1_file File path to read from","tags":"","url":"interface/read_file.html"},{"title":"validate – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface validate Checks if the derived type is valid . Calls interface~~validate~~CallsGraph interface~validate validate proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_number validate_gmsh_msh1_number interface~validate->proc~validate_gmsh_msh1_number proc~validate_gmsh_msh1_reg_elem validate_gmsh_msh1_reg_elem interface~validate->proc~validate_gmsh_msh1_reg_elem proc~validate_gmsh_msh1_reg_phys validate_gmsh_msh1_reg_phys interface~validate->proc~validate_gmsh_msh1_reg_phys proc~validate_gmsh_msh1_data->interface~validate interface~is_read_successful is_read_successful proc~validate_gmsh_msh1_data->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_public->interface~is_read_successful proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~is_read_successful_gmsh_msh1_file is_read_successful_gmsh_msh1_file interface~is_read_successful->proc~is_read_successful_gmsh_msh1_file proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~all_flag all_flag proc~is_read_successful_gmsh_msh1_file->proc~all_flag proc~is_iostat_failure is_iostat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_iostat_failure proc~is_stat_failure is_stat_failure proc~is_read_successful_gmsh_msh1_file->proc~is_stat_failure Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by interface~~validate~~CalledByGraph interface~validate validate proc~validate_gmsh_msh1_data validate_gmsh_msh1_data interface~validate->proc~validate_gmsh_msh1_data proc~validate_gmsh_msh1_element_without_mesh_data validate_gmsh_msh1_element_without_mesh_data interface~validate->proc~validate_gmsh_msh1_element_without_mesh_data proc~validate_gmsh_msh1_node validate_gmsh_msh1_node interface~validate->proc~validate_gmsh_msh1_node proc~validate_gmsh_msh1_element_with_mesh_data_public validate_gmsh_msh1_element_with_mesh_data_public interface~validate->proc~validate_gmsh_msh1_element_with_mesh_data_public proc~validate_gmsh_msh1_data->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_private validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_data->proc~validate_gmsh_msh1_element_with_mesh_data_private proc~validate_gmsh_msh1_element_with_mesh_data_private->interface~validate proc~validate_gmsh_msh1_element_without_mesh_data->interface~validate proc~validate_gmsh_msh1_node->interface~validate proc~validate_gmsh_msh1_element_with_mesh_data_public->proc~validate_gmsh_msh1_element_with_mesh_data_private Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function validate_gmsh_msh1_data (mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_with_mesh_data_public (element, mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_without_mesh_data (element) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value logical private elemental function validate_gmsh_msh1_node (node) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value logical private elemental function validate_gmsh_msh1_number (number) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(in) :: number Return Value logical private elemental function validate_gmsh_msh1_reg_elem (reg_elem) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem Return Value logical private elemental function validate_gmsh_msh1_reg_phys (reg_phys) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys Return Value logical","tags":"","url":"interface/validate.html"},{"title":"write_diagnostic_report_reading – DSCF-1224/gmsh_msh1_reader_fortran","text":"public interface write_diagnostic_report_reading Calls interface~~write_diagnostic_report_reading~~CallsGraph interface~write_diagnostic_report_reading write_diagnostic_report_reading proc~write_diagnostic_report_reading_gmsh_msh1_file write_diagnostic_report_reading_gmsh_msh1_file interface~write_diagnostic_report_reading->proc~write_diagnostic_report_reading_gmsh_msh1_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private  subroutine write_diagnostic_report_reading_gmsh_msh1_file (mesh_data, write_unit) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: write_unit","tags":"","url":"interface/write_diagnostic_report_reading.html"},{"title":"findloc – DSCF-1224/gmsh_msh1_reader_fortran","text":"private interface findloc Calls interface~~findloc~~CallsGraph interface~findloc findloc proc~findloc_gmsh_msh1_node_number findloc_gmsh_msh1_node_number interface~findloc->proc~findloc_gmsh_msh1_node_number interface~count_nodes count_nodes proc~findloc_gmsh_msh1_node_number->interface~count_nodes proc~count_nodes_gmsh_msh1_data count_nodes_gmsh_msh1_data interface~count_nodes->proc~count_nodes_gmsh_msh1_data proc~count_nodes_gmsh_msh1_element count_nodes_gmsh_msh1_element interface~count_nodes->proc~count_nodes_gmsh_msh1_element Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures private elemental function findloc_gmsh_msh1_node_number (msh1_data, node_number) result(location) License MIT Version experimental Returns the location of the gmsh_msh1_node_type corresponding to the node_number argument. Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: msh1_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value integer","tags":"","url":"interface/findloc.html"},{"title":"gmsh_msh1_reader – DSCF-1224/gmsh_msh1_reader_fortran","text":"Fortran module for reading Gmsh MSH file format version 1 Uses ieee_arithmetic gmsh_msh_elm_type_fortran iso_fortran_env module~~gmsh_msh1_reader~~UsesGraph module~gmsh_msh1_reader gmsh_msh1_reader gmsh_msh_elm_type_fortran gmsh_msh_elm_type_fortran module~gmsh_msh1_reader->gmsh_msh_elm_type_fortran ieee_arithmetic ieee_arithmetic module~gmsh_msh1_reader->ieee_arithmetic iso_fortran_env iso_fortran_env module~gmsh_msh1_reader->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial character(len=*), private, parameter :: elm_section_footer = '$ENDELM' character(len=*), private, parameter :: elm_section_header = '$ELM' logical, private, parameter :: initial_flag_allocation_elements = .false. Whether allocated the array to read elements\n(Initial value) logical, private, parameter :: initial_flag_allocation_nodes = .false. Whether allocated the array to read nodes\n(Initial value) logical, private, parameter :: initial_flag_deallocation_elements = .false. Whether deallocated the array to read elements\n(Initial value) logical, private, parameter :: initial_flag_deallocation_nodes = .false. Whether deallocated the array to read nodes\n(Initial value) logical, private, parameter :: initial_flag_elm_section_footer = .false. Whether found the element section footer (Initial value) logical, private, parameter :: initial_flag_elm_section_header = .false. Whether found the element section header (Initial value) logical, private, parameter :: initial_flag_nod_section_footer = .false. Whether found the node section footer (Initial value) logical, private, parameter :: initial_flag_nod_section_header = .false. Whether found the node section header (Initial value) logical, private, parameter :: initial_flag_number_of_elements = .false. Whether found the number of elements (Initial value) logical, private, parameter :: initial_flag_number_of_nodes = .false. Whether found the number of nodes (Initial value) logical, private, parameter :: initial_flag_reading_elements = .false. Whether the read was successful: element\n(Initial value) logical, private, parameter :: initial_flag_reading_node = .false. Whether the read was successful: node\n(Initial value) integer, private, parameter :: iostat_success = 0 iostat value when an I/O statement executes successfully integer, private, parameter :: minval_location = 1 integer, private, parameter :: msg_len = 512 message length character(len=*), private, parameter :: nod_section_footer = '$ENDNOD' character(len=*), private, parameter :: nod_section_header = '$NOD' integer, private, parameter :: stat_success = 0 stat value when a statement executes successfully Interfaces public        interface count_elements Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . private elemental function count_elements_gmsh_msh1_data (mesh_data) result(number_of_elements) License MIT Version experimental Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer public        interface count_nodes Count the number of gmsh_msh1_node_type s. private elemental function count_nodes_gmsh_msh1_data (mesh_data) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer private elemental function count_nodes_gmsh_msh1_element (element) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_element_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer public        interface export_elm_number Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). private elemental function export_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer public        interface export_elm_type Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). private elemental function export_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer public        interface export_node_number Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). private elemental function export_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value integer public        interface export_node_number_list Get the node_number_list from the gmsh_msh1_element_type (as integer). private pure function export_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer, dimension( count_nodes(element) ) public        interface export_reg_elem Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). private elemental function export_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer public        interface export_reg_phys Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). private elemental function export_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer public        interface is_read_successful private elemental function is_read_successful_gmsh_msh1_file (mesh_data) result(is_valid) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical public        interface lookup_element Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . private  subroutine lookup_element_by_loc_gmsh_msh1_file (mesh_data, location, element, stat, errmsg) License MIT Version experimental Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . Warning If no element corresponding to the location argument exists,\na element initialized by initialize_gmsh_msh1_element will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in element type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg public        interface lookup_node Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . private elemental function lookup_node_by_loc_gmsh_msh1_file (mesh_data, location) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Warning If no gmsh_msh1_node_type corresponding to the location argument exists,\na gmsh_msh1_node_type initialized by initialize_gmsh_msh1_node will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in node Return Value type( gmsh_msh1_node_type ) private elemental function lookup_node_by_num_gmsh_msh1_file (mesh_data, node_number) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Warning If no gmsh_msh1_node_type corresponding to the node_number argument exists,\na gmsh_msh1_node_type initialized by initialize_gmsh_msh1_node will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value type( gmsh_msh1_node_type ) public        interface operator(.eq.) private elemental function is_equal_gmsh_msh1_elm_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_elm_number_type ), intent(in) :: number1 type( gmsh_msh1_elm_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_node_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_number_type ), intent(in) :: number1 type( gmsh_msh1_node_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_elem_type (reg_elem1, reg_elem2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem1 type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_phys_type (reg_phys1, reg_phys2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys1 type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys2 Return Value logical public        interface output_elm_number Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). private elemental function output_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_elm_number_type ) public        interface output_elm_type Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). private elemental function output_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type(gmsh_msh_elm_type) public        interface output_node_number Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). private elemental function output_node_number_gmsh_msh1_element (element, location) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Warning If no gmsh_msh1_node_number_type corresponding to the location argument exists,\na gmsh_msh1_node_number_type initialized by initialize_gmsh_msh1_number will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element integer, intent(in) :: location location in node_number_list Return Value type( gmsh_msh1_node_number_type ) private elemental function output_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value type( gmsh_msh1_node_number_type ) public        interface output_node_number_list Get the node_number_list from the gmsh_msh1_element_type (as derived type). private pure function output_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_node_number_type ), dimension( count_nodes(element) ) public        interface output_reg_elem Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). private elemental function output_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_elem_type ) public        interface output_reg_phys Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). private elemental function output_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_phys_type ) public        interface output_x_coord Get the x_coord from the gmsh_msh1_node_type . private elemental function output_x_coord_gmsh_msh1_node (node) result(x_coord) License MIT Version experimental Get the x_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) public        interface output_y_coord Get the y_coord from the gmsh_msh1_node_type . private elemental function output_y_coord_gmsh_msh1_node (node) result(y_coord) License MIT Version experimental Get the y_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) public        interface output_z_coord Get the z_coord from the gmsh_msh1_node_type . private elemental function output_z_coord_gmsh_msh1_node (node) result(z_coord) License MIT Version experimental Get the z_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) public        interface read_file private  subroutine read_file_gmsh_msh1 (mesh_data, msh1_file) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument character(len=*), intent(in) :: msh1_file File path to read from public        interface validate Checks if the derived type is valid . private elemental function validate_gmsh_msh1_data (mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_with_mesh_data_public (element, mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_without_mesh_data (element) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Note This function does NOT verify that referenced gmsh_msh1_node_type exist in the mesh. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value logical private elemental function validate_gmsh_msh1_node (node) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Note Verification by ieee_is_finite is not required by the gmsh documentation. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value logical private elemental function validate_gmsh_msh1_number (number) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Warning The number must be a positive (non-zero) integer. Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(in) :: number Return Value logical private elemental function validate_gmsh_msh1_reg_elem (reg_elem) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Warning The expression must be a positive (non-zero) integer. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem Return Value logical private elemental function validate_gmsh_msh1_reg_phys (reg_phys) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Warning The expression must be a positive integer, or zero. Note If expression is equal to zero, the element is considered not to belong to any physical entity. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys Return Value logical public        interface write_diagnostic_report_reading private  subroutine write_diagnostic_report_reading_gmsh_msh1_file (mesh_data, write_unit) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: write_unit private        interface findloc private elemental function findloc_gmsh_msh1_node_number (msh1_data, node_number) result(location) License MIT Version experimental Returns the location of the gmsh_msh1_node_type corresponding to the node_number argument. Warning If no gmsh_msh1_node_type corresponding to the node_number argument exists, zero will be returned. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: msh1_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value integer Derived Types type, public :: gmsh_msh1_data_type Derived type for reading Gmsh MSH file format version 1 Components Type Visibility Attributes Name Initial type( gmsh_msh1_element_type ), private, allocatable, dimension(:) :: element the elements in the mesh logical, private :: flag_allocation_elements = initial_flag_allocation_elements Whether allocated the array to read elements logical, private :: flag_allocation_nodes = initial_flag_allocation_nodes Whether allocated the array to read nodes logical, private :: flag_deallocation_elements = initial_flag_deallocation_elements Whether deallocated the array to read elements logical, private :: flag_deallocation_nodes = initial_flag_deallocation_nodes Whether deallocated the array to read nodes logical, private :: flag_elm_section_footer = initial_flag_elm_section_footer Whether found the element section footer logical, private :: flag_elm_section_header = initial_flag_elm_section_header Whether found the element section header logical, private :: flag_nod_section_footer = initial_flag_nod_section_footer Whether found the node section footer logical, private :: flag_nod_section_header = initial_flag_nod_section_header Whether found the node section header logical, private :: flag_number_of_elements = initial_flag_number_of_elements Whether found the number of elements logical, private :: flag_number_of_nodes = initial_flag_number_of_nodes Whether found the number of nodes logical, private :: flag_reading_elements = initial_flag_reading_elements Whether the read was successful: element logical, private :: flag_reading_nodes = initial_flag_reading_node Whether the read was successful: node type( gmsh_msh1_node_type ), private, allocatable, dimension(:) :: node the nodes in the mesh type( gmsh_msh1_status_type ), private :: status type, public :: gmsh_msh1_element_type Derived type for reading the n -th element in the Gmsh MSH file format version 1 Components Type Visibility Attributes Name Initial type( gmsh_msh1_elm_number_type ), private :: elm_number the number (index) of the n -th element in the mesh. type(gmsh_msh_elm_type), private :: elm_type the geometrical type of the n -th element in the mesh. type( gmsh_msh1_node_number_type ), private, allocatable, dimension(:) :: node_number_list the list of the number_of_nodes node numbers of the n -th element. type( gmsh_msh1_reg_elem_type ), private :: reg_elem the tag of the elementary entity to which the element belongs type( gmsh_msh1_reg_phys_type ), private :: reg_phys the tag of the physical entity to which the element belongs type, public, extends( gmsh_msh1_number_type ) :: gmsh_msh1_elm_number_type Derived type for reading the number (index) of the n -th element in the mesh. type, public, extends( gmsh_msh1_number_type ) :: gmsh_msh1_node_number_type Derived type for reading the number (index) of the n -th node in the mesh. type, public :: gmsh_msh1_node_type Derived type for reading\nthe n -th node in the Gmsh MSH file format version 1 Components Type Visibility Attributes Name Initial type( gmsh_msh1_node_number_type ), private :: node_number the number (index) of the n -th node in the mesh. real(kind=real64), private :: x_coord The floating point values giving the X coordinates of the n -th node. real(kind=real64), private :: y_coord The floating point values giving the Y coordinates of the n -th node. real(kind=real64), private :: z_coord The floating point values giving the Z coordinates of the n -th node. type, public, extends( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_elem_type Derived type for reading the tag of the elementary entity to which the element belongs Read more… type, public, extends( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_phys_type Derived type for reading the tag of the physical entity to which the element belongs Read more… type, private, abstract :: gmsh_msh1_number_type Derived type for reading - the number (index) of the n -th element in the mesh. - the number (index) of the n -th node in the mesh. Read more… Components Type Visibility Attributes Name Initial integer, private :: number type, private :: gmsh_msh1_status_type Components Type Visibility Attributes Name Initial type( gmsh_msh1_status_unit_type ), public :: err type( gmsh_msh1_status_unit_type ), public :: io type, private :: gmsh_msh1_status_unit_type Components Type Visibility Attributes Name Initial integer, public :: code character(len=msg_len), public :: msg type, private, abstract :: gmsh_msh1_tag_type Derived type for reading - the tag of the elementary entity to which the element belongs - the tag of the physical entity to which the element belongs Components Type Visibility Attributes Name Initial integer, private :: expression Functions private elemental function all_flag (mesh_data) License MIT Version experimental If any of the flags is .false. , it indicates that the file read operation failed. Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function count_elements_gmsh_msh1_data (mesh_data) result(number_of_elements) License MIT Version experimental Count the number of gmsh_msh1_element_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer private elemental function count_nodes_gmsh_msh1_data (mesh_data) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_data_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value integer private elemental function count_nodes_gmsh_msh1_element (element) result(number_of_nodes) License MIT Version experimental Count the number of gmsh_msh1_node_type s in the gmsh_msh1_element_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer private elemental function export_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer private elemental function export_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer private elemental function export_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value integer private pure function export_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer, dimension( count_nodes(element) ) private elemental function export_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer private elemental function export_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as integer). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value integer private elemental function findloc_gmsh_msh1_node_number (msh1_data, node_number) result(location) License MIT Version experimental Returns the location of the gmsh_msh1_node_type corresponding to the node_number argument. Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: msh1_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value integer private elemental function is_equal_gmsh_msh1_elm_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_elm_number_type ), intent(in) :: number1 type( gmsh_msh1_elm_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_node_number_type (number1, number2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_number_type ), intent(in) :: number1 type( gmsh_msh1_node_number_type ), intent(in) :: number2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_elem_type (reg_elem1, reg_elem2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem1 type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem2 Return Value logical private elemental function is_equal_gmsh_msh1_reg_phys_type (reg_phys1, reg_phys2) result(is_equal) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys1 type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys2 Return Value logical private elemental function is_iostat_failure (status) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical private elemental function is_iostat_success (status) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical private elemental function is_read_successful_gmsh_msh1_file (mesh_data) result(is_valid) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function is_stat_failure (status) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_status_type ), intent(in) :: status Return Value logical private elemental function lookup_node_by_loc_gmsh_msh1_file (mesh_data, location) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in node Return Value type( gmsh_msh1_node_type ) private elemental function lookup_node_by_num_gmsh_msh1_file (mesh_data, node_number) result(node) License MIT Version experimental Look up a gmsh_msh1_node_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data type( gmsh_msh1_node_number_type ), intent(in) :: node_number Return Value type( gmsh_msh1_node_type ) private elemental function output_elm_number_gmsh_msh1_element (element) result(elm_number) License MIT Version experimental Get the gmsh_msh1_elm_number_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_elm_number_type ) private elemental function output_elm_type_gmsh_msh1_element (element) result(elm_type) License MIT Version experimental Get the gmsh_msh_elm_type ( @gmsh_msh_elm_type_fortran ) from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type(gmsh_msh_elm_type) private elemental function output_node_number_gmsh_msh1_element (element, location) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element integer, intent(in) :: location location in node_number_list Return Value type( gmsh_msh1_node_number_type ) private elemental function output_node_number_gmsh_msh1_node (node) result(node_number) License MIT Version experimental Get the gmsh_msh1_node_number_type from the gmsh_msh1_node_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value type( gmsh_msh1_node_number_type ) private pure function output_node_number_list_gmsh_msh1_element (element) result(node_number_list) License MIT Version experimental Get the node_number_list from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_node_number_type ), dimension( count_nodes(element) ) private elemental function output_reg_elem_gmsh_msh1_element (element) result(reg_elem) License MIT Version experimental Get the gmsh_msh1_reg_elem_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_elem_type ) private elemental function output_reg_phys_gmsh_msh1_element (element) result(reg_phys) License MIT Version experimental Get the gmsh_msh1_reg_phys_type from the gmsh_msh1_element_type (as derived type). Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value type( gmsh_msh1_reg_phys_type ) private elemental function output_x_coord_gmsh_msh1_node (node) result(x_coord) License MIT Version experimental Get the x_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) private elemental function output_y_coord_gmsh_msh1_node (node) result(y_coord) License MIT Version experimental Get the y_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) private elemental function output_z_coord_gmsh_msh1_node (node) result(z_coord) License MIT Version experimental Get the z_coord from the gmsh_msh1_node_type . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value real(kind=real64) private elemental function validate_gmsh_msh1_data (mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_with_mesh_data_private (element, mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_with_mesh_data_public (element, mesh_data) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element type( gmsh_msh1_data_type ), intent(in) :: mesh_data Return Value logical private elemental function validate_gmsh_msh1_element_without_mesh_data (element) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(in) :: element Return Value logical private elemental function validate_gmsh_msh1_node (node) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(in) :: node Return Value logical private elemental function validate_gmsh_msh1_number (number) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(in) :: number Return Value logical private elemental function validate_gmsh_msh1_reg_elem (reg_elem) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_elem_type ), intent(in) :: reg_elem Return Value logical private elemental function validate_gmsh_msh1_reg_phys (reg_phys) result(is_valid) License MIT Version experimental Checks if the derived type is valid . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_reg_phys_type ), intent(in) :: reg_phys Return Value logical Subroutines private  subroutine clear_msg (msg) License MIT Version experimental Arguments Type Intent Optional Attributes Name character(len=msg_len), intent(inout) :: msg private  subroutine initialize_gmsh_msh1_element (element, stat, errmsg) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg private elemental subroutine initialize_gmsh_msh1_node (node) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_node_type ), intent(out) :: node private elemental subroutine initialize_gmsh_msh1_number (number) License MIT Version experimental Arguments Type Intent Optional Attributes Name class( gmsh_msh1_number_type ), intent(inout) :: number private  subroutine lookup_element_by_loc_gmsh_msh1_file (mesh_data, location, element, stat, errmsg) License MIT Version experimental Look up a gmsh_msh1_element_type in the gmsh_msh1_data_type . Read more… Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: location location in element type( gmsh_msh1_element_type ), intent(inout) :: element integer, intent(out) :: stat character(len=*), intent(inout) :: errmsg private  subroutine read_file_gmsh_msh1 (mesh_data, msh1_file) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument character(len=*), intent(in) :: msh1_file File path to read from private  subroutine read_gmsh_msh1_element (file_unit, itr_element, text_line, element, status, flag) License MIT Version experimental Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit integer, intent(in) :: itr_element character(len=*), intent(inout) :: text_line type( gmsh_msh1_element_type ), intent(inout) :: element type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag private  subroutine read_gmsh_msh1_file_kernel (mesh_data, file_unit) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(inout) :: mesh_data The read data will be stored in this argument integer, intent(in) :: file_unit private  subroutine read_gmsh_msh1_header_footer (file_unit, header_footer, text_line, status, flag) License MIT Version experimental Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit character(len=*), intent(in) :: header_footer character(len=*), intent(inout) :: text_line type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag private  subroutine read_gmsh_msh1_node (file_unit, itr_node, node, status) License MIT Version experimental Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit integer, intent(in) :: itr_node type( gmsh_msh1_node_type ), intent(out) :: node type( gmsh_msh1_status_type ), intent(inout) :: status private  subroutine read_gmsh_msh1_number_of_items (file_unit, item_name, text_line, number_of_items, status, flag) License MIT Version experimental Arguments Type Intent Optional Attributes Name integer, intent(in) :: file_unit character(len=*), intent(in) :: item_name character(len=*), intent(inout) :: text_line integer, intent(out) :: number_of_items type( gmsh_msh1_status_type ), intent(inout) :: status logical, intent(out) :: flag private  subroutine write_diagnostic_report_reading_gmsh_msh1_file (mesh_data, write_unit) License MIT Version experimental Arguments Type Intent Optional Attributes Name type( gmsh_msh1_data_type ), intent(in) :: mesh_data integer, intent(in) :: write_unit","tags":"","url":"module/gmsh_msh1_reader.html"},{"title":"gmsh_msh1_reader.f90 – DSCF-1224/gmsh_msh1_reader_fortran","text":"Source Code !> Fortran module for reading |GmshReferenceManualTop| |GmshReferenceManualMsh1| module gmsh_msh1_reader use , intrinsic :: iso_fortran_env , & ! only : iostat_eor , & ! & iostat_end , & ! & real64 use , intrinsic :: ieee_arithmetic , & ! only : ieee_is_finite , & ! & ieee_signaling_nan , & ! & ieee_value use , non_intrinsic :: gmsh_msh_elm_type_fortran implicit none private public :: operator (. eq .) public :: count_elements public :: count_nodes public :: export_elm_number public :: export_elm_type public :: export_node_number public :: export_node_number_list public :: export_reg_elem public :: export_reg_phys public :: gmsh_msh1_data_type public :: gmsh_msh1_element_type public :: gmsh_msh1_elm_number_type public :: gmsh_msh1_node_type public :: gmsh_msh1_node_number_type public :: gmsh_msh1_reg_elem_type public :: gmsh_msh1_reg_phys_type public :: is_read_successful public :: lookup_element public :: lookup_node public :: output_elm_number public :: output_elm_type public :: output_node_number public :: output_node_number_list public :: output_reg_elem public :: output_reg_phys public :: output_x_coord public :: output_y_coord public :: output_z_coord public :: read_file public :: validate public :: write_diagnostic_report_reading !> Whether found the node section header<br> !> (Initial value) logical , parameter :: initial_flag_nod_section_header = . false . !> Whether found the number of nodes<br> !> (Initial value) logical , parameter :: initial_flag_number_of_nodes = . false . !> Whether deallocated the array to read nodes !> (Initial value) logical , parameter :: initial_flag_deallocation_nodes = . false . !> Whether allocated the array to read nodes !> (Initial value) logical , parameter :: initial_flag_allocation_nodes = . false . !> Whether the read was successful: node !> (Initial value) logical , parameter :: initial_flag_reading_node = . false . !> Whether found the node section footer<br> !> (Initial value) logical , parameter :: initial_flag_nod_section_footer = . false . !> Whether found the element section header<br> !> (Initial value) logical , parameter :: initial_flag_elm_section_header = . false . !> Whether found the number of elements<br> !> (Initial value) logical , parameter :: initial_flag_number_of_elements = . false . !> Whether deallocated the array to read elements !> (Initial value) logical , parameter :: initial_flag_deallocation_elements = . false . !> Whether allocated the array to read elements !> (Initial value) logical , parameter :: initial_flag_allocation_elements = . false . !> Whether the read was successful: element !> (Initial value) logical , parameter :: initial_flag_reading_elements = . false . !> Whether found the element section footer<br> !> (Initial value) logical , parameter :: initial_flag_elm_section_footer = . false . !> `iostat` value when an I/O statement executes successfully integer , parameter :: iostat_success = 0 !> version: experimental integer , parameter :: minval_location = 1 !> version: experimental !> message length integer , parameter :: msg_len = 512 !> `stat` value when a statement executes successfully integer , parameter :: stat_success = 0 character ( len =* ), parameter :: elm_section_header = '$ELM' character ( len =* ), parameter :: elm_section_footer = '$ENDELM' character ( len =* ), parameter :: nod_section_header = '$NOD' character ( len =* ), parameter :: nod_section_footer = '$ENDNOD' !> version: experimental !> Derived type for reading !> - |DescGmshMsh1ElmNumber| !> - |DescGmshMsh1NodeNumber| !> !> @warning !> |WarnGmshMsh1NumberType| !> @endwarning !> !> @note !> The [[gmsh_msh1_number_type:number]] do not necessarily have to form a dense nor an ordered sequence. !> @endnote type , abstract :: gmsh_msh1_number_type integer , private :: number end type gmsh_msh1_number_type !> version: experimental !> Derived type for reading |DescGmshMsh1ElmNumber| type , extends ( gmsh_msh1_number_type ) :: gmsh_msh1_elm_number_type end type gmsh_msh1_elm_number_type !> version: experimental !> Derived type for reading !> - |DescGmshMsh1RegElem| !> - |DescGmshMsh1RegPhys| type , abstract :: gmsh_msh1_tag_type integer , private :: expression end type gmsh_msh1_tag_type !> version: experimental !> Derived type for reading |DescGmshMsh1RegElem| !> !> @warning !> |WarnGmshMsh1RegElem| !> @endwarning type , extends ( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_elem_type end type gmsh_msh1_reg_elem_type !> version: experimental !> Derived type for reading |DescGmshMsh1RegPhys| !> !> @warning !> |WarnGmshMsh1RegPhys| !> @endwarning !> !> @note !> |NoteGmshMsh1RegPhys| !> @endnote type , extends ( gmsh_msh1_tag_type ) :: gmsh_msh1_reg_phys_type end type gmsh_msh1_reg_phys_type !> version: experimental !> Derived type for reading the *n*-th element in the |GmshReferenceManualTop| |GmshReferenceManualMsh1| type :: gmsh_msh1_element_type private !> |DescGmshMsh1ElmNumber| type ( gmsh_msh1_elm_number_type ) :: elm_number !> |DescGmshMsh1ElmType| type ( gmsh_msh_elm_type ) :: elm_type !> |DescGmshMsh1RegPhys| type ( gmsh_msh1_reg_phys_type ) :: reg_phys !> |DescGmshMsh1RegElem| type ( gmsh_msh1_reg_elem_type ) :: reg_elem !> the list of the `number_of_nodes` node numbers of the *n*-th element. type ( gmsh_msh1_node_number_type ), allocatable , dimension (:) :: node_number_list end type gmsh_msh1_element_type !> version: experimental !> Derived type for reading |DescGmshMsh1NodeNumber| type , extends ( gmsh_msh1_number_type ) :: gmsh_msh1_node_number_type end type gmsh_msh1_node_number_type !> version: experimental !> Derived type for reading !> the *n*-th node in the !> |GmshReferenceManualTop| !> |GmshReferenceManualMsh1| type :: gmsh_msh1_node_type private !> |DescGmshMsh1NodeNumber| type ( gmsh_msh1_node_number_type ) :: node_number !> The floating point values giving the X coordinates of the *n*-th node. real ( real64 ) :: x_coord !> The floating point values giving the Y coordinates of the *n*-th node. real ( real64 ) :: y_coord !> The floating point values giving the Z coordinates of the *n*-th node. real ( real64 ) :: z_coord end type gmsh_msh1_node_type !> version: experimental type :: gmsh_msh1_status_unit_type integer :: code character ( len = msg_len ) :: msg end type gmsh_msh1_status_unit_type !> version: experimental type :: gmsh_msh1_status_type type ( gmsh_msh1_status_unit_type ) :: err , io end type gmsh_msh1_status_type !> version: experimental !> Derived type for reading !> |GmshReferenceManualTop| !> |GmshReferenceManualMsh1| type :: gmsh_msh1_data_type private !> Whether found the node section header logical :: flag_nod_section_header = initial_flag_nod_section_header !> Whether found the number of nodes logical :: flag_number_of_nodes = initial_flag_number_of_nodes !> Whether deallocated the array to read nodes logical :: flag_deallocation_nodes = initial_flag_deallocation_nodes !> Whether allocated the array to read nodes logical :: flag_allocation_nodes = initial_flag_allocation_nodes !> Whether the read was successful: node logical :: flag_reading_nodes = initial_flag_reading_node !> Whether found the node section footer logical :: flag_nod_section_footer = initial_flag_nod_section_footer !> Whether found the element section header logical :: flag_elm_section_header = initial_flag_elm_section_header !> Whether found the number of elements logical :: flag_number_of_elements = initial_flag_number_of_elements !> Whether deallocated the array to read elements logical :: flag_deallocation_elements = initial_flag_deallocation_elements !> Whether allocated the array to read elements logical :: flag_allocation_elements = initial_flag_allocation_elements !> Whether the read was successful: element logical :: flag_reading_elements = initial_flag_reading_elements !> Whether found the element section footer logical :: flag_elm_section_footer = initial_flag_elm_section_footer type ( gmsh_msh1_status_type ) :: status !> the nodes in the mesh type ( gmsh_msh1_node_type ), allocatable , dimension (:) :: node !> the elements in the mesh type ( gmsh_msh1_element_type ), allocatable , dimension (:) :: element end type gmsh_msh1_data_type !> version: experimental interface operator (. eq .) module procedure :: is_equal_gmsh_msh1_elm_number_type module procedure :: is_equal_gmsh_msh1_node_number_type module procedure :: is_equal_gmsh_msh1_reg_elem_type module procedure :: is_equal_gmsh_msh1_reg_phys_type end interface operator (. eq .) !> version: experimental !> |DescCountElements| interface count_elements module procedure :: count_elements_gmsh_msh1_data end interface count_elements !> version: experimental !> |DescCountNodes|. interface count_nodes module procedure :: count_nodes_gmsh_msh1_data module procedure :: count_nodes_gmsh_msh1_element end interface count_nodes !> version: experimental !> |DescExportElmNumber| interface export_elm_number module procedure :: export_elm_number_gmsh_msh1_element end interface export_elm_number !> version: experimental !> |DescExportElmType| interface export_elm_type module procedure :: export_elm_type_gmsh_msh1_element end interface export_elm_type !> version: experimental !> |DescExportNodeNumber| interface export_node_number module procedure :: export_node_number_gmsh_msh1_node end interface export_node_number !> version: experimental !> |DescExportNodeNumberList| interface export_node_number_list module procedure :: export_node_number_list_gmsh_msh1_element end interface export_node_number_list !> version: experimental !> |DescExportRegElem| interface export_reg_elem module procedure :: export_reg_elem_gmsh_msh1_element end interface export_reg_elem !> version: experimental !> |DescExportRegPhys| interface export_reg_phys module procedure :: export_reg_phys_gmsh_msh1_element end interface export_reg_phys !> version: experimental interface findloc module procedure :: findloc_gmsh_msh1_node_number end interface findloc !> version: experimental interface is_read_successful module procedure :: is_read_successful_gmsh_msh1_file end interface is_read_successful !> version: experimental !> |DescLookupElement| interface lookup_element module procedure :: lookup_element_by_loc_gmsh_msh1_file end interface lookup_element !> version: experimental !> |DescLookupNode| interface lookup_node module procedure :: lookup_node_by_loc_gmsh_msh1_file module procedure :: lookup_node_by_num_gmsh_msh1_file end interface lookup_node !> version: experimental !> |DescOutputElmNumber| interface output_elm_number module procedure :: output_elm_number_gmsh_msh1_element end interface output_elm_number !> version: experimental !> |DescOutputElmType| interface output_elm_type module procedure :: output_elm_type_gmsh_msh1_element end interface output_elm_type !> version: experimental !> |DescOutputNodeNumber| interface output_node_number module procedure :: output_node_number_gmsh_msh1_element module procedure :: output_node_number_gmsh_msh1_node end interface output_node_number !> version: experimental !> |DescOutputNodeNumberList| interface output_node_number_list module procedure :: output_node_number_list_gmsh_msh1_element end interface output_node_number_list !> version: experimental !> |DescOutputRegElem| interface output_reg_elem module procedure :: output_reg_elem_gmsh_msh1_element end interface output_reg_elem !> version: experimental !> |DescOutputRegPhys| interface output_reg_phys module procedure :: output_reg_phys_gmsh_msh1_element end interface output_reg_phys !> version: experimental !> |DescOutputXCoord| interface output_x_coord module procedure :: output_x_coord_gmsh_msh1_node end interface output_x_coord !> version: experimental !> |DescOutputYCoord| interface output_y_coord module procedure :: output_y_coord_gmsh_msh1_node end interface output_y_coord !> version: experimental !> |DescOutputZCoord| interface output_z_coord module procedure :: output_z_coord_gmsh_msh1_node end interface output_z_coord !> version: experimental interface read_file module procedure :: read_file_gmsh_msh1 end interface read_file !> version: experimental !> |DescValidate| interface validate module procedure :: validate_gmsh_msh1_data module procedure :: validate_gmsh_msh1_element_with_mesh_data_public module procedure :: validate_gmsh_msh1_element_without_mesh_data module procedure :: validate_gmsh_msh1_node module procedure :: validate_gmsh_msh1_number module procedure :: validate_gmsh_msh1_reg_elem module procedure :: validate_gmsh_msh1_reg_phys end interface validate !> version: experimental interface write_diagnostic_report_reading module procedure :: write_diagnostic_report_reading_gmsh_msh1_file end interface write_diagnostic_report_reading contains !> version: experimental !> If any of the flags is `.false.`, it indicates that the file read operation failed. elemental function all_flag ( mesh_data ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: all_flag all_flag = mesh_data % flag_nod_section_header & ! & . and . mesh_data % flag_number_of_nodes & ! & . and . mesh_data % flag_deallocation_nodes & ! & . and . mesh_data % flag_allocation_nodes & ! & . and . mesh_data % flag_reading_nodes & ! & . and . mesh_data % flag_nod_section_footer & ! & . and . mesh_data % flag_elm_section_header & ! & . and . mesh_data % flag_number_of_elements & ! & . and . mesh_data % flag_deallocation_elements & ! & . and . mesh_data % flag_allocation_elements & ! & . and . mesh_data % flag_reading_elements & ! & . and . mesh_data % flag_elm_section_footer end function all_flag !> version: experimental !> |DescCountNodes| in the [[gmsh_msh1_data_type]]. elemental function count_nodes_gmsh_msh1_data ( mesh_data ) result ( number_of_nodes ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer :: number_of_nodes number_of_nodes = size ( mesh_data % node (:) ) end function count_nodes_gmsh_msh1_data !> version: experimental !> |DescCountNodes| in the [[gmsh_msh1_element_type]]. elemental function count_nodes_gmsh_msh1_element ( element ) result ( number_of_nodes ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: number_of_nodes number_of_nodes = size ( element % node_number_list (:) ) end function count_nodes_gmsh_msh1_element !> version: experimental !> |DescExportElmNumber| elemental function export_elm_number_gmsh_msh1_element ( element ) result ( elm_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: elm_number elm_number = element % elm_number % number end function export_elm_number_gmsh_msh1_element !> version: experimental !> |DescExportElmType| elemental function export_elm_type_gmsh_msh1_element ( element ) result ( elm_type ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: elm_type elm_type = export ( element % elm_type ) end function export_elm_type_gmsh_msh1_element !> version: experimental !> |DescExportNodeNumber| elemental function export_node_number_gmsh_msh1_node ( node ) result ( node_number ) type ( gmsh_msh1_node_type ), intent ( in ) :: node integer :: node_number node_number = node % node_number % number end function export_node_number_gmsh_msh1_node !> version: experimental !> |DescExportNodeNumberList| pure function export_node_number_list_gmsh_msh1_element ( element ) result ( node_number_list ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer , dimension ( count_nodes ( element ) ) :: node_number_list node_number_list (:) = element % node_number_list (:)% number end function export_node_number_list_gmsh_msh1_element !> version: experimental !> |DescExportRegElem| elemental function export_reg_elem_gmsh_msh1_element ( element ) result ( reg_elem ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: reg_elem reg_elem = element % reg_elem % expression end function export_reg_elem_gmsh_msh1_element !> version: experimental !> |DescExportRegPhys| elemental function export_reg_phys_gmsh_msh1_element ( element ) result ( reg_phys ) type ( gmsh_msh1_element_type ), intent ( in ) :: element integer :: reg_phys reg_phys = element % reg_phys % expression end function export_reg_phys_gmsh_msh1_element !> version: experimental !> Returns the location of the [[gmsh_msh1_node_type]] corresponding to the [[findloc_gmsh_msh1_node_number:node_number]] argument. !> @warning !> If no [[gmsh_msh1_node_type]] corresponding to the [[findloc_gmsh_msh1_node_number:node_number]] argument exists, !> **zero** will be returned. elemental function findloc_gmsh_msh1_node_number ( msh1_data , node_number ) result ( location ) type ( gmsh_msh1_data_type ), intent ( in ) :: msh1_data type ( gmsh_msh1_node_number_type ), intent ( in ) :: node_number integer :: location integer :: itr_node location = 0 if ( . not . allocated ( msh1_data % node ) ) return do itr_node = 1 , count_nodes ( msh1_data ) if ( msh1_data % node ( itr_node )% node_number . eq . node_number ) then location = itr_node return end if end do end function findloc_gmsh_msh1_node_number !> version: experimental elemental function is_iostat_failure ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_iostat_failure is_iostat_failure = ( status % io % code . ne . iostat_success ) end function is_iostat_failure !> version: experimental elemental function is_iostat_success ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_iostat_success is_iostat_success = ( status % io % code . eq . iostat_success ) end function is_iostat_success !> version: experimental elemental function is_equal_gmsh_msh1_elm_number_type ( number1 , number2 ) result ( is_equal ) type ( gmsh_msh1_elm_number_type ), intent ( in ) :: number1 , number2 logical :: is_equal is_equal = number1 % number . eq . number2 % number end function is_equal_gmsh_msh1_elm_number_type !> version: experimental elemental function is_equal_gmsh_msh1_node_number_type ( number1 , number2 ) result ( is_equal ) type ( gmsh_msh1_node_number_type ), intent ( in ) :: number1 , number2 logical :: is_equal is_equal = number1 % number . eq . number2 % number end function is_equal_gmsh_msh1_node_number_type !> version: experimental elemental function is_equal_gmsh_msh1_reg_elem_type ( reg_elem1 , reg_elem2 ) result ( is_equal ) type ( gmsh_msh1_reg_elem_type ), intent ( in ) :: reg_elem1 , reg_elem2 logical :: is_equal is_equal = reg_elem1 % expression . eq . reg_elem2 % expression end function is_equal_gmsh_msh1_reg_elem_type !> version: experimental elemental function is_equal_gmsh_msh1_reg_phys_type ( reg_phys1 , reg_phys2 ) result ( is_equal ) type ( gmsh_msh1_reg_phys_type ), intent ( in ) :: reg_phys1 , reg_phys2 logical :: is_equal is_equal = reg_phys1 % expression . eq . reg_phys2 % expression end function is_equal_gmsh_msh1_reg_phys_type !> version: experimental elemental function is_read_successful_gmsh_msh1_file ( mesh_data ) result ( is_valid ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid logical :: is_invalid is_invalid = & ! & is_stat_failure ( mesh_data % status ) & ! & . or . is_iostat_failure ( mesh_data % status ) & ! & . or . ( . not . all_flag ( mesh_data ) ) is_valid = . not . is_invalid end function is_read_successful_gmsh_msh1_file !> version: experimental elemental function is_stat_failure ( status ) type ( gmsh_msh1_status_type ), intent ( in ) :: status logical :: is_stat_failure is_stat_failure = ( status % err % code . ne . stat_success ) end function is_stat_failure !> version: experimental !> |DescLookupNode| !> @warning !> If no [[gmsh_msh1_node_type]] corresponding to the [[lookup_node_by_loc_gmsh_msh1_file:location]] argument exists, !> a [[gmsh_msh1_node_type]] initialized by [[initialize_gmsh_msh1_node]] will be returned. elemental function lookup_node_by_loc_gmsh_msh1_file ( mesh_data , location ) result ( node ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data !> location in [[gmsh_msh1_data_type:node]] integer , intent ( in ) :: location type ( gmsh_msh1_node_type ) :: node if ( location . lt . minval_location ) then call initialize_gmsh_msh1_node ( node ) else if ( count_nodes ( mesh_data ) . lt . location ) then call initialize_gmsh_msh1_node ( node ) else node = mesh_data % node ( location ) end if end function lookup_node_by_loc_gmsh_msh1_file !> version: experimental !> |DescLookupNode| !> @warning !> If no [[gmsh_msh1_node_type]] corresponding to the [[lookup_node_by_num_gmsh_msh1_file:node_number]] argument exists, !> a [[gmsh_msh1_node_type]] initialized by [[initialize_gmsh_msh1_node]] will be returned. elemental function lookup_node_by_num_gmsh_msh1_file ( mesh_data , node_number ) result ( node ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data type ( gmsh_msh1_node_number_type ), intent ( in ) :: node_number type ( gmsh_msh1_node_type ) :: node integer :: location location = findloc ( mesh_data , node_number ) if ( location . lt . minval_location ) then call initialize_gmsh_msh1_node ( node ) else node = mesh_data % node ( location ) end if end function lookup_node_by_num_gmsh_msh1_file !> version: experimental !> |DescOutputElmNumber| elemental function output_elm_number_gmsh_msh1_element ( element ) result ( elm_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_elm_number_type ) :: elm_number elm_number = element % elm_number end function output_elm_number_gmsh_msh1_element !> version: experimental !> |DescOutputElmType| elemental function output_elm_type_gmsh_msh1_element ( element ) result ( elm_type ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh_elm_type ) :: elm_type elm_type = element % elm_type end function output_elm_type_gmsh_msh1_element !> version: experimental !> |DescOutputNodeNumber| !> @warning !> If no [[gmsh_msh1_node_number_type]] corresponding to the [[output_node_number_gmsh_msh1_element:location]] argument exists, !> a [[gmsh_msh1_node_number_type]] initialized by [[initialize_gmsh_msh1_number]] will be returned. elemental function output_node_number_gmsh_msh1_element ( element , location ) result ( node_number ) type ( gmsh_msh1_element_type ), intent ( in ) :: element !> location in [[gmsh_msh1_element_type:node_number_list]] integer , intent ( in ) :: location type ( gmsh_msh1_node_number_type ) :: node_number if ( location . lt . minval_location ) then call initialize_gmsh_msh1_number ( node_number ) else if ( count_nodes ( element ) . lt . location ) then call initialize_gmsh_msh1_number ( node_number ) else node_number = element % node_number_list ( location ) end if end function output_node_number_gmsh_msh1_element !> version: experimental !> |DescOutputNodeNumber| elemental function output_node_number_gmsh_msh1_node ( node ) result ( node_number ) type ( gmsh_msh1_node_type ), intent ( in ) :: node type ( gmsh_msh1_node_number_type ) :: node_number node_number = node % node_number end function output_node_number_gmsh_msh1_node !> version: experimental !> |DescOutputNodeNumberList| pure function output_node_number_list_gmsh_msh1_element ( element ) result ( node_number_list ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_node_number_type ), dimension ( count_nodes ( element ) ) :: node_number_list node_number_list (:) = element % node_number_list (:) end function output_node_number_list_gmsh_msh1_element !> version: experimental !> |DescCountElements| elemental function count_elements_gmsh_msh1_data ( mesh_data ) result ( number_of_elements ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer :: number_of_elements number_of_elements = size ( mesh_data % element (:) ) end function count_elements_gmsh_msh1_data !> version: experimental !> |DescOutputRegElem| elemental function output_reg_elem_gmsh_msh1_element ( element ) result ( reg_elem ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_reg_elem_type ) :: reg_elem reg_elem = element % reg_elem end function output_reg_elem_gmsh_msh1_element !> version: experimental !> |DescOutputRegPhys| elemental function output_reg_phys_gmsh_msh1_element ( element ) result ( reg_phys ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_reg_phys_type ) :: reg_phys reg_phys = element % reg_phys end function output_reg_phys_gmsh_msh1_element !> version: experimental !> |DescOutputXCoord| elemental function output_x_coord_gmsh_msh1_node ( node ) result ( x_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: x_coord x_coord = node % x_coord end function output_x_coord_gmsh_msh1_node !> version: experimental !> |DescOutputYCoord| elemental function output_y_coord_gmsh_msh1_node ( node ) result ( y_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: y_coord y_coord = node % y_coord end function output_y_coord_gmsh_msh1_node !> version: experimental !> |DescOutputZCoord| elemental function output_z_coord_gmsh_msh1_node ( node ) result ( z_coord ) type ( gmsh_msh1_node_type ), intent ( in ) :: node real ( real64 ) :: z_coord z_coord = node % z_coord end function output_z_coord_gmsh_msh1_node !> version: experimental !> |DescValidate| elemental function validate_gmsh_msh1_data ( mesh_data ) result ( is_valid ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = is_read_successful ( mesh_data ) if (. not . is_valid ) return is_valid = all ( validate ( mesh_data % node (:) ) ) if (. not . is_valid ) return is_valid = all ( validate_gmsh_msh1_element_with_mesh_data_private ( mesh_data % element (:), mesh_data ) ) end function validate_gmsh_msh1_data !> version: experimental !> |DescValidate| !> @note !> This function does **NOT** validate [[validate_gmsh_msh1_element_with_mesh_data_private:mesh_data]]. !> @endnote elemental function validate_gmsh_msh1_element_with_mesh_data_private ( element , mesh_data ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = validate ( element ) if (. not . is_valid ) return is_valid = all ( findloc ( mesh_data , element % node_number_list (:) ) . ge . minval_location ) end function validate_gmsh_msh1_element_with_mesh_data_private !> version: experimental !> |DescValidate| elemental function validate_gmsh_msh1_element_with_mesh_data_public ( element , mesh_data ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data logical :: is_valid is_valid = is_read_successful ( mesh_data ) if (. not . is_valid ) return is_valid = validate_gmsh_msh1_element_with_mesh_data_private ( element , mesh_data ) end function validate_gmsh_msh1_element_with_mesh_data_public !> version: experimental !> |DescValidate| !> @note !> This function does **NOT** verify that referenced [[gmsh_msh1_node_type]] exist in the mesh. !> @endnote elemental function validate_gmsh_msh1_element_without_mesh_data ( element ) result ( is_valid ) type ( gmsh_msh1_element_type ), intent ( in ) :: element logical :: is_valid is_valid = validate ( element % elm_number ) if (. not . is_valid ) return is_valid = validate ( element % reg_elem ) if (. not . is_valid ) return is_valid = validate ( element % reg_phys ) if (. not . is_valid ) return is_valid = allocated ( element % node_number_list ) if (. not . is_valid ) return is_valid = all ( validate ( element % node_number_list (:) ) ) end function validate_gmsh_msh1_element_without_mesh_data !> version: experimental !> |DescValidate| !> @note !> Verification by ieee_is_finite is not required by the gmsh documentation. !> @endnote elemental function validate_gmsh_msh1_node ( node ) result ( is_valid ) type ( gmsh_msh1_node_type ), intent ( in ) :: node logical :: is_valid is_valid = validate ( node % node_number ) if ( . not . is_valid ) return is_valid = ieee_is_finite ( node % x_coord ) & ! & . and . ieee_is_finite ( node % y_coord ) & ! & . and . ieee_is_finite ( node % z_coord ) end function validate_gmsh_msh1_node !> version: experimental !> |DescValidate| !> @warning !> |WarnGmshMsh1NumberType| !> @endwarning elemental function validate_gmsh_msh1_number ( number ) result ( is_valid ) class ( gmsh_msh1_number_type ), intent ( in ) :: number logical :: is_valid is_valid = number % number . gt . 0 end function validate_gmsh_msh1_number !> version: experimental !> |DescValidate| !> @warning !> |WarnGmshMsh1RegElem| !> @endwarning elemental function validate_gmsh_msh1_reg_elem ( reg_elem ) result ( is_valid ) type ( gmsh_msh1_reg_elem_type ), intent ( in ) :: reg_elem logical :: is_valid is_valid = reg_elem % expression . gt . 0 end function validate_gmsh_msh1_reg_elem !> version: experimental !> |DescValidate| !> !> @warning !> |WarnGmshMsh1RegPhys| !> @endwarning !> !> @note !> |NoteGmshMsh1RegPhys| !> @endnote elemental function validate_gmsh_msh1_reg_phys ( reg_phys ) result ( is_valid ) type ( gmsh_msh1_reg_phys_type ), intent ( in ) :: reg_phys logical :: is_valid is_valid = reg_phys % expression . ge . 0 end function validate_gmsh_msh1_reg_phys !> version: experimental subroutine clear_msg ( msg ) character ( len = msg_len ), intent ( inout ) :: msg msg (:) = repeat ( ' ' , msg_len ) end subroutine clear_msg !> version: experimental subroutine initialize_gmsh_msh1_element ( element , stat , errmsg ) type ( gmsh_msh1_element_type ), intent ( inout ) :: element integer , intent ( out ) :: stat character ( len =* ), intent ( inout ) :: errmsg call initialize_gmsh_msh1_number ( element % elm_number ) call initialize ( element % elm_type ) element % reg_elem % expression = 0 element % reg_phys % expression = 0 if ( allocated ( element % node_number_list ) ) then deallocate ( & ! element % node_number_list , & ! stat = stat , & ! errmsg = errmsg (:) & ! ) end if end subroutine initialize_gmsh_msh1_element !> version: experimental elemental subroutine initialize_gmsh_msh1_node ( node ) type ( gmsh_msh1_node_type ), intent ( out ) :: node call initialize_gmsh_msh1_number ( node % node_number ) node % x_coord = ieee_value ( node % x_coord , ieee_signaling_nan ) node % y_coord = node % x_coord node % z_coord = node % x_coord end subroutine initialize_gmsh_msh1_node !> version: experimental elemental subroutine initialize_gmsh_msh1_number ( number ) class ( gmsh_msh1_number_type ), intent ( inout ) :: number number % number = 0 end subroutine initialize_gmsh_msh1_number !> version: experimental !> |DescLookupElement| !> @warning !> If no element corresponding to the [[lookup_element_by_loc_gmsh_msh1_file:location]] argument exists, !> a element initialized by [[initialize_gmsh_msh1_element]] will be returned. subroutine lookup_element_by_loc_gmsh_msh1_file ( mesh_data , location , element , stat , errmsg ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data !> location in [[gmsh_msh1_data_type:element]] integer , intent ( in ) :: location type ( gmsh_msh1_element_type ), intent ( inout ) :: element integer , intent ( out ) :: stat character ( len =* ), intent ( inout ) :: errmsg if ( location . lt . minval_location ) then call initialize_gmsh_msh1_element ( element , stat , errmsg (:) ) else if ( count_elements ( mesh_data ) . lt . location ) then call initialize_gmsh_msh1_element ( element , stat , errmsg (:) ) else element = mesh_data % element ( location ) end if end subroutine lookup_element_by_loc_gmsh_msh1_file !> version: experimental subroutine read_gmsh_msh1_element ( file_unit , itr_element , text_line , element , status , flag ) integer , intent ( in ) :: file_unit integer , intent ( in ) :: itr_element character ( len =* ), intent ( inout ) :: text_line type ( gmsh_msh1_element_type ), intent ( inout ) :: element type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag !> the number of nodes for the *n*-th element. integer :: number_of_nodes call initialize_gmsh_msh1_element (& ! element = element , & ! stat = status % err % code , & ! errmsg = status % err % msg (:) & ! ) if ( is_stat_failure ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to deallocate No.' , & ! itr_element , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) return end if read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element as string:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! element % elm_number , & ! element % elm_type , & ! element % reg_phys , & ! element % reg_elem , & ! number_of_nodes if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element''s' , & ! '`elm_number`, ' , & ! '`elm_type`,' , & ! '`reg_phys`' , & ! '`reg_elem`' , & ! 'or' , & ! '`number_of_nodes`:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if flag = ( number_of_nodes . ge . 0 ) if ( . not . flag ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,2(1X,A),1X,I0)' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element: `number_of_nodes` is negative:' , & ! 'read value:' , & ! number_of_nodes return end if allocate ( & ! element % node_number_list ( number_of_nodes ) , & ! stat = status % err % code , & ! errmsg = status % err % msg (:) & ! ) if ( is_stat_failure ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to deallocate No.' , & ! itr_element , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! element % elm_number , & ! element % elm_type , & ! element % reg_phys , & ! element % reg_elem , & ! number_of_nodes , & ! element % node_number_list (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_element , & ! 'element''s' , & ! '`node_number_list`:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) return end if end subroutine read_gmsh_msh1_element !> version: experimental subroutine read_file_gmsh_msh1 ( mesh_data , msh1_file ) !> The read data will be stored in this argument type ( gmsh_msh1_data_type ), intent ( inout ) :: mesh_data !> File path to read from character ( len =* ), intent ( in ) :: msh1_file integer :: file_unit mesh_data % flag_nod_section_header = initial_flag_nod_section_header mesh_data % flag_number_of_nodes = initial_flag_number_of_nodes mesh_data % flag_deallocation_nodes = initial_flag_deallocation_nodes mesh_data % flag_allocation_nodes = initial_flag_allocation_nodes mesh_data % flag_nod_section_footer = initial_flag_nod_section_footer mesh_data % flag_elm_section_header = initial_flag_elm_section_header mesh_data % flag_number_of_elements = initial_flag_number_of_elements mesh_data % flag_deallocation_elements = initial_flag_deallocation_elements mesh_data % flag_allocation_elements = initial_flag_allocation_elements mesh_data % flag_reading_elements = initial_flag_reading_elements mesh_data % flag_elm_section_footer = initial_flag_elm_section_footer call clear_msg ( mesh_data % status % err % msg (:) ) call clear_msg ( mesh_data % status % io % msg (:) ) open ( & ! newunit = file_unit , & ! file = msh1_file (:) , & ! action = 'read' , & ! form = 'formatted' , & ! status = 'old' , & ! iostat = mesh_data % status % io % code , & ! iomsg = mesh_data % status % io % msg (:) & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return call read_gmsh_msh1_file_kernel ( mesh_data , file_unit ) close ( & ! unit = file_unit , & ! iostat = mesh_data % status % io % code , & ! iomsg = mesh_data % status % io % msg (:) & ! ) mesh_data % status % err % code = stat_success end subroutine read_file_gmsh_msh1 !> version: experimental subroutine read_gmsh_msh1_file_kernel ( mesh_data , file_unit ) !> The read data will be stored in this argument type ( gmsh_msh1_data_type ), intent ( inout ) :: mesh_data integer , intent ( in ) :: file_unit !> the number of elements in the mesh integer :: number_of_elements !> the number of nodes in the mesh integer :: number_of_nodes !> version: experimental !> A string for reading a line of text.<br> !> The length of this string is 2048,<br> !> which is a provisional value. character ( len = 2048 ) :: text_line read_nod_section_header : & ! do call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = nod_section_header (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_nod_section_header & ! ) if ( mesh_data % flag_nod_section_header ) exit if ( is_iostat_success ( mesh_data % status ) ) cycle return end do & ! read_nod_section_header read_number_of_nodes : & ! block call read_gmsh_msh1_number_of_items ( & ! file_unit = file_unit , & ! item_name = 'number_of_nodes' , & ! text_line = text_line (:) , & ! number_of_items = number_of_nodes , & ! status = mesh_data % status , & ! flag = mesh_data % flag_number_of_nodes & ! ) if ( . not . mesh_data % flag_number_of_nodes ) return end block & ! read_number_of_nodes read_nodes : & ! block integer :: itr_node if ( allocated ( mesh_data % node ) ) then deallocate (& ! mesh_data % node , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return end if mesh_data % flag_deallocation_nodes = . true . allocate ( & ! mesh_data % node ( number_of_nodes ) , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return mesh_data % flag_allocation_nodes = . true . call initialize_gmsh_msh1_node ( mesh_data % node (:) ) do itr_node = 1 , number_of_nodes call read_gmsh_msh1_node ( & ! file_unit = file_unit , & ! itr_node = itr_node , & ! node = mesh_data % node ( itr_node ) , & ! status = mesh_data % status & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return end do mesh_data % flag_reading_nodes = . true . end block & ! read_nodes read_nod_section_footer : & ! block call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = nod_section_footer (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_nod_section_footer & ! ) if ( . not . mesh_data % flag_nod_section_footer ) return end block & ! read_nod_section_footer read_elm_section_header : & ! do call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = elm_section_header (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_elm_section_header & ! ) if ( mesh_data % flag_elm_section_header ) exit if ( is_iostat_success ( mesh_data % status ) ) cycle return end do & ! read_elm_section_header read_number_of_elements : & ! block call read_gmsh_msh1_number_of_items ( & ! file_unit = file_unit , & ! item_name = 'number_of_elements' , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! number_of_items = number_of_elements , & ! flag = mesh_data % flag_number_of_elements & ! ) if ( . not . mesh_data % flag_number_of_elements ) return end block & ! read_number_of_elements read_elements : & ! block integer :: itr_element if ( allocated ( mesh_data % element ) ) then deallocate (& ! mesh_data % element , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return end if mesh_data % flag_deallocation_elements = . true . allocate ( & ! mesh_data % element ( number_of_elements ) , & ! stat = mesh_data % status % err % code , & ! errmsg = mesh_data % status % err % msg (:) & ! ) if ( is_stat_failure ( mesh_data % status ) ) return mesh_data % flag_allocation_elements = . true . if ( number_of_elements . gt . 0 ) then do itr_element = 1 , number_of_elements call read_gmsh_msh1_element ( & ! file_unit = file_unit , & ! itr_element = itr_element , & ! text_line = text_line (:) , & ! element = mesh_data % element ( itr_element ) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_reading_elements & ! ) if ( is_iostat_failure ( mesh_data % status ) ) return if ( is_stat_failure ( mesh_data % status ) ) return if ( . not . mesh_data % flag_reading_elements ) return end do else mesh_data % flag_reading_elements = . true . end if end block & ! read_elements read_elm_section_footer : & ! block call read_gmsh_msh1_header_footer ( & ! file_unit = file_unit , & ! header_footer = elm_section_footer (:) , & ! text_line = text_line (:) , & ! status = mesh_data % status , & ! flag = mesh_data % flag_elm_section_footer & ! ) end block & ! read_elm_section_footer end subroutine read_gmsh_msh1_file_kernel !> version: experimental subroutine read_gmsh_msh1_header_footer ( file_unit , header_footer , text_line , status , flag ) integer , intent ( in ) :: file_unit character ( len =* ), intent ( in ) :: header_footer character ( len =* ), intent ( inout ) :: text_line type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) select case ( status % io % code ) case ( iostat_success ) flag = trim ( text_line (:) ) . eq . header_footer (:) if ( flag ) then status % err % msg (:) = ' ' else status % err % msg (:) = 'The read text line is not `' // header_footer (:) // '`.' end if case ( iostat_end ) status % err % msg (:) = 'Failed to found the `' // header_footer (:) // '`' case default status % err % msg (:) = 'Failed to read the `' // header_footer (:) // '`' end select end subroutine read_gmsh_msh1_header_footer !> version: experimental subroutine read_gmsh_msh1_node ( file_unit , itr_node , node , status ) integer , intent ( in ) :: file_unit integer , intent ( in ) :: itr_node type ( gmsh_msh1_node_type ), intent ( out ) :: node type ( gmsh_msh1_status_type ), intent ( inout ) :: status read ( & ! unit = file_unit , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! node % node_number , & ! node % x_coord , & ! node % y_coord , & ! node % z_coord if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code write ( & ! unit = status % err % msg (:) , & ! fmt = '(A,I0,*(1X,A))' & ! ) & ! 'Failed to read No.' , & ! itr_node , & ! 'node:' , & ! trim ( status % io % msg (:) ) call clear_msg ( status % io % msg ) end if end subroutine read_gmsh_msh1_node !> version: experimental subroutine read_gmsh_msh1_number_of_items ( file_unit , item_name , text_line , number_of_items , status , flag ) integer , intent ( in ) :: file_unit character ( len =* ), intent ( in ) :: item_name character ( len =* ), intent ( inout ) :: text_line integer , intent ( out ) :: number_of_items type ( gmsh_msh1_status_type ), intent ( inout ) :: status logical , intent ( out ) :: flag character ( 1 ) :: dummy read ( & ! unit = file_unit , & ! fmt = '(A)' , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! text_line (:) if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code status % err % msg (:) = status % io % msg (:) return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! number_of_items , dummy if ( is_iostat_success ( status ) ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(3A)' & ! ) & ! 'Extra data was detected while reading `' , & ! item_name , & ! '`.' return end if read ( & ! unit = text_line (:) , & ! fmt = * , & ! iostat = status % io % code , & ! iomsg = status % io % msg (:) & ! ) & ! number_of_items if ( is_iostat_failure ( status ) ) then status % err % code = status % io % code status % err % msg (:) = status % io % msg (:) return end if if ( number_of_items . lt . 0 ) then write ( & ! unit = status % err % msg (:) , & ! fmt = '(2(A,1X),I0,1X,A)' & ! ) & ! 'The number of' , & ! item_name , & ! number_of_items , & ! 'must be greater than -1.' return end if flag = . true . end subroutine read_gmsh_msh1_number_of_items !> version: experimental subroutine write_diagnostic_report_reading_gmsh_msh1_file ( mesh_data , write_unit ) type ( gmsh_msh1_data_type ), intent ( in ) :: mesh_data integer , intent ( in ) :: write_unit write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_nod_section_header , & ! nod_section_header (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_number_of_nodes , & ! 'number_of_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_deallocation_nodes , & ! 'deallocation_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_allocation_nodes , & ! 'allocation_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_reading_nodes , & ! 'reading_nodes' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_nod_section_footer , & ! nod_section_footer (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_elm_section_header , & ! elm_section_header (:) write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_number_of_elements , & ! 'number_of_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_deallocation_elements , & ! 'deallocation_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_allocation_elements , & ! 'allocation_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_reading_elements , & ! 'reading_elements' write ( write_unit , '(L1,6X,\":\",1X,A)' ) & ! mesh_data % flag_elm_section_footer , & ! elm_section_footer (:) write ( write_unit , \"(A,I0)\" ) \"iostat : \" , mesh_data % status % io % code write ( write_unit , \"(A,A )\" ) \"iomsg  : \" , trim ( mesh_data % status % io % msg (:) ) write ( write_unit , \"(A,I0)\" ) \"stat   : \" , mesh_data % status % err % code write ( write_unit , \"(A,A )\" ) \"errmsg : \" , trim ( mesh_data % status % err % msg (:) ) end subroutine write_diagnostic_report_reading_gmsh_msh1_file end module gmsh_msh1_reader","tags":"","url":"sourcefile/gmsh_msh1_reader.f90.html"}]}