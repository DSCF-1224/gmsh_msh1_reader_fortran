name: CI

on:

  push:

  pull_request:

  workflow_dispatch:

    inputs:

      force_gmsh:

        description: 'Force run gmsh job regardless of conditions'
        required: false
        default: false
        type: boolean


jobs:

  check-branch:

    runs-on: ubuntu-latest

    outputs:

      branch-missing: ${{ steps.changes.outputs.branch-missing }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for `test_data` branch existence
        id: changes
        run: |
          if git ls-remote --heads origin test_data | grep -q test_data; then
            echo "test_data branch exists"
            echo "branch-missing=false" >> $GITHUB_OUTPUT
          else
            echo "test_data branch does not exist"
            echo "branch-missing=true" >> $GITHUB_OUTPUT
          fi

      - name: Display result
        run: |
          echo "branch-missing: ${{ steps.changes.outputs.branch-missing }}"

  check-geo-changes:

    runs-on: ubuntu-latest

    outputs:

      geo-changed: ${{ steps.changes.outputs.geo-changed }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for .geo file changes
        id: changes
        run: |
          case "${{ github.event_name }}" in
            "workflow_dispatch")
              echo "geo-changed=true" >> $GITHUB_OUTPUT
              ;;
            "push")
              if git diff --name-only HEAD~1 HEAD | grep -q "test/.*\.geo$"; then
                echo "geo-changed=true" >> $GITHUB_OUTPUT
              else
                echo "geo-changed=false" >> $GITHUB_OUTPUT
              fi
              ;;
            "pull_request")
              git fetch origin ${{ github.base_ref }}
              if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "test/.*\.geo$"; then
                echo "geo-changed=true" >> $GITHUB_OUTPUT
              else
                echo "geo-changed=false" >> $GITHUB_OUTPUT
              fi
              ;;
            *)
              echo "geo-changed=false" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Display result
        run: |
          echo "geo-changed: ${{ steps.changes.outputs.geo-changed }}"

  gmsh:

    needs: [check-branch, check-geo-changes]

    runs-on: ubuntu-latest

    permissions:
      contents: write

    if: github.event.inputs.force_gmsh == 'true' || needs.check-branch.outputs.branch-missing == 'true' || needs.check-geo-changes.outputs.geo-changed == 'true'

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Gmsh
        run: sudo apt-get install -y gmsh

      - name: Verify Gmsh installation
        run: gmsh --version

      - name: Run Gmsh to generate test data
        run: |
          cd test
          gmsh -parse_and_exit empty.geo
          gmsh -parse_and_exit 2d_qua.geo
          gmsh -parse_and_exit 2d_tri.geo
          gmsh -parse_and_exit 3d_tet.geo
          cd ..

      - name: Fetch latest data
        run: git fetch

      - name: Setup `git config`
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Stash generated .msh1 files
        run: |
          git add test/*.msh1
          git stash push -m "Generated msh1 files"

      - name: Create branch `test_data`
        run: |
          if git ls-remote --heads origin test_data | grep -q test_data; then
            git checkout test_data
            git pull origin test_data
          else
            git checkout --orphan test_data
            git rm -rf .
            echo "# Generated Mesh Files" > README.md
            echo "This branch contains auto-generated .msh1 files from .geo files." >> README.md
            git add README.md
            git commit -m "Initial commit for test_data branch"
            git push origin test_data
          fi

          mkdir -p test
          git stash pop

          cp test/*.msh1 test/ 2>/dev/null || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update generated mesh files from commit ${{ github.sha }}"
            git push origin test_data
          fi

      - name: Upload artifacts (fallback)
        uses: actions/upload-artifact@v4
        with:
          name: test_msh1_files
          path: test/*.msh1
          retention-days: 1

  fpm:

    runs-on: ubuntu-latest

    needs: [check-branch, check-geo-changes, gmsh]

    if: always() && !cancelled()

    strategy:

      matrix:

        profile: [debug, release]

      fail-fast: false

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout repository (data for test)
        uses: actions/checkout@v4
        with:
          ref: test_data
          path: branch_test_data

      - name: Copy data for test
        run: cp ./branch_test_data/test/*.msh1 ./test

      - name: Verify the download
        run: |
          cd test
          ls -a
          cd -

      - name: Install Gmsh
        run: sudo apt-get install -y gmsh

      - name: Verify Gmsh installation
        run: gmsh --version

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install fpm
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify fpm installation
        run: fpm --version

      - name: Install fypp
        run: pip install --upgrade fypp ninja

      - name: Verify fypp installation
        run: fypp --version

      - name: Verify gfortran installation
        run: gfortran --version

      - name: Build library using fpm
        run: fpm build --profile ${{ matrix.profile }}

      - name: Test library using fpm (${{ matrix.profile }} mode)
        run: fpm test --profile ${{ matrix.profile }}

  ford:

    needs: fpm

    runs-on: ubuntu-latest

    permissions:
      contents: write

    if: always() && !cancelled()

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install fpm
        uses: fortran-lang/setup-fpm@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check fpm
        run: fpm --version

      - name: Install FORD
        run: sudo pip install ford

      - name: Verify FORD installation
        run: ford --version

      - name: Install Graphviz
        run: sudo apt-get install -y graphviz

      - name: Verify Graphviz installation
        run: dot -V

      - name: Generate the documentation
        run: ford ford.md

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc
          if-no-files-found: error

      - name: Deploy documentation
        uses: JamesIves/github-pages-deploy-action@4.1.0
        if: ${{ github.event_name == 'push'  &&  github.ref == 'refs/heads/main' }}
        with:
          branch: github-pages
          folder: doc
